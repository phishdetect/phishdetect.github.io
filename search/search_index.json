{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PhishDetect Documentation","title":"PhishDetect Documentation"},{"location":"#phishdetect-documentation","text":"","title":"PhishDetect Documentation"},{"location":"api/python/","text":"Python API PhishDetect Node's REST API is also easily accessible through an MIT licensed Python 3 library which can be simply installed (and updated) with: pip3 install -U phishdetect Once installed, you can instantiate a connection to your PhishDetect Node like following: import phishdetect # You have to specify the base host of your PhishDetect Node (including the # schema). The API key is optional, although it is required by some admin-level # APIs. pd = phishdetect . PhishDetect ( host = \"https://your-server.com\" , api_key = \"your-api-key\" ) You can now use the pd object to access all PhishDetect Node's API routes. All available models are detailed in the reference below, and are accessible from an instantiated PhishDetect object. If you are looking for some practical examples, you can have a look at the collection of utilities built using this Python API available here . Users activate ( self , uuid ) Activate pending user. Parameters: Name Type Description Default uuid str UUID of the user to activate. required Returns: Type Description The parsed JSON response from the REST API request. Examples: import phishdetect pd = phishdetect . PhishDetect ( host = \"https://your-server.com\" , api_key = \"your-api-key\" ) for user in pd . users . get_pending (): pd . users . activate ( user [ \"uuid\" ]) Source code in phishdetect/models/users.py def activate ( self , uuid ): \"\"\"Activate pending user. Args: uuid (str): UUID of the user to activate. Returns: The parsed JSON response from the REST API request. Examples: ```python import phishdetect pd = phishdetect.PhishDetect(host=\"https://your-server.com\", api_key=\"your-api-key\") for user in pd.users.get_pending(): pd.users.activate(user[\"uuid\"]) ``` \"\"\" return self . _phishdetect . get ( API_PATH [ \"users_activate\" ] . format ( uuid = uuid )) deactivate ( self , uuid ) Deactivate existing user. Parameters: Name Type Description Default uuid str UUID of the user to deactivate. required Returns: Type Description The parsed JSON response from the REST API request. Examples: import phishdetect pd = phishdetect . PhishDetect ( host = \"https://your-server.com\" , api_key = \"your-api-key\" ) for user in pd . users . get_active (): pd . users . deactivate ( user [ \"uuid\" ]) Source code in phishdetect/models/users.py def deactivate ( self , uuid ): \"\"\"Deactivate existing user. Args: uuid (str): UUID of the user to deactivate. Returns: The parsed JSON response from the REST API request. Examples: ```python import phishdetect pd = phishdetect.PhishDetect(host=\"https://your-server.com\", api_key=\"your-api-key\") for user in pd.users.get_active(): pd.users.deactivate(user[\"uuid\"]) ``` \"\"\" return self . _phishdetect . get ( API_PATH [ \"users_deactivate\" ] . format ( uuid = uuid )) get_active ( self ) Get list of active users. Returns: Type Description The parsed JSON response from the REST API request. Examples: import phishdetect pd = phishdetect . PhishDetect ( host = \"https://your-server.com\" , api_key = \"your-api-key\" ) pd . users . get_active () Source code in phishdetect/models/users.py def get_active ( self ): \"\"\"Get list of active users. Returns: The parsed JSON response from the REST API request. Examples: ```python import phishdetect pd = phishdetect.PhishDetect(host=\"https://your-server.com\", api_key=\"your-api-key\") pd.users.get_active() ``` \"\"\" return self . _phishdetect . get ( API_PATH [ \"users_active\" ]) get_pending ( self ) Get list of users pending activation. Returns: Type Description The parsed JSON response from the REST API request. Examples: import phishdetect pd = phishdetect . PhishDetect ( host = \"https://your-server.com\" , api_key = \"your-api-key\" ) pd . users . get_pending () Source code in phishdetect/models/users.py def get_pending ( self ): \"\"\"Get list of users pending activation. Returns: The parsed JSON response from the REST API request. Examples: ```python import phishdetect pd = phishdetect.PhishDetect(host=\"https://your-server.com\", api_key=\"your-api-key\") pd.users.get_pending() ``` \"\"\" return self . _phishdetect . get ( API_PATH [ \"users_pending\" ]) Indicators add ( self , indicators , tags = [], enabled = True , indicators_type = None ) Add new indicators to PhishDetect Node. Parameters: Name Type Description Default indicators list List of indicators, e.g. [\"domain1.com\", \"domain2.com\"]. This list can also contain indicators hashed in SHA256 form, but in that case the indicators_type argument is required in order to specify if they are domains or emails. required tags list List of tags to assign to all these indicators. [] enabled list Boolean flag indicating if the indicators should be marked as enabled. True indicators_type str String value to explicitly specify the type of indicators submitted. This is typically used only if you are submitting indicators that are already in hashed form, for which the Node can not automatically detect a type. None Returns: Type Description The parsed JSON response from the REST API request. Examples: import phishdetect pd = phishdetect . PhishDetect ( host = \"https://your-server.com\" , api_key = \"your-api-key\" ) # Add new indicators. pd . indicators . add ( indicators = [ \"baddomain1.com\" , \"baddomain2.com\" ], tags = [ \"tag1\" , \"tag2\" ]) # Add new indicators in \"pending\" state. pd . indicators . add ( indicators = [ \"baddomain1.com\" , \"baddomain2.com\" ], tags = [ \"tag1\" , \"tag2\" ], enabled = False ) # Add new hashed indicators. pd . indicators . add ( indicators = [ \"3a2868d359962f226187048c8f7cbf42a5df3dddcd33746f6eb874a660a84bb6\" ], indicators_type = \"domain\" ) Source code in phishdetect/models/indicators.py def add ( self , indicators , tags = [], enabled = True , indicators_type = None ): \"\"\"Add new indicators to PhishDetect Node. Args: indicators (list): List of indicators, e.g. [\"domain1.com\", \"domain2.com\"]. This list can also contain indicators hashed in SHA256 form, but in that case the `indicators_type` argument is required in order to specify if they are domains or emails. tags (list)): List of tags to assign to all these indicators. enabled (list): Boolean flag indicating if the indicators should be marked as enabled. indicators_type (str): String value to explicitly specify the type of indicators submitted. This is typically used only if you are submitting indicators that are already in hashed form, for which the Node can not automatically detect a type. Returns: The parsed JSON response from the REST API request. Examples: ```python import phishdetect pd = phishdetect.PhishDetect(host=\"https://your-server.com\", api_key=\"your-api-key\") # Add new indicators. pd.indicators.add(indicators=[\"baddomain1.com\", \"baddomain2.com\"], tags=[\"tag1\", \"tag2\"]) # Add new indicators in \"pending\" state. pd.indicators.add(indicators=[\"baddomain1.com\", \"baddomain2.com\"], tags=[\"tag1\", \"tag2\"], enabled=False) # Add new hashed indicators. pd.indicators.add(indicators=[\"3a2868d359962f226187048c8f7cbf42a5df3dddcd33746f6eb874a660a84bb6\"], indicators_type=\"domain\") ``` \"\"\" json = { \"indicators\" : indicators , \"tags\" : tags , \"enabled\" : enabled , \"type\" : indicators_type , } return self . _phishdetect . post ( API_PATH [ \"indicators_add\" ], json = json ) details ( self , sha256 ) Retrieve details on a given indicator (by hash). Parameters: Name Type Description Default sha256 str SHA256 hash of the indicator. required Returns: Type Description The parsed JSON response from the REST API request. Examples: import phishdetect pd = phishdetect . PhishDetect ( host = \"https://your-server.com\" , api_key = \"your-api-key\" ) # Get details of a hashed indicator. details = pd . indicators . details ( sha256 = \"3a2868d359962f226187048c8f7cbf42a5df3dddcd33746f6eb874a660a84bb6\" ) Source code in phishdetect/models/indicators.py def details ( self , sha256 ): \"\"\"Retrieve details on a given indicator (by hash). Args: sha256 (str): SHA256 hash of the indicator. Returns: The parsed JSON response from the REST API request. Examples: ```python import phishdetect pd = phishdetect.PhishDetect(host=\"https://your-server.com\", api_key=\"your-api-key\") # Get details of a hashed indicator. details = pd.indicators.details(sha256=\"3a2868d359962f226187048c8f7cbf42a5df3dddcd33746f6eb874a660a84bb6\") ``` \"\"\" return self . _phishdetect . get ( API_PATH [ \"indicators_details\" ] . format ( sha256 = sha256 )) disable ( self , indicators ) Set status of provided indicators to \"disabled\". Parameters: Name Type Description Default indicators list List of hashed indicators in SHA256 format. required Returns: Type Description The parsed JSON response from the REST API request. Examples: import phishdetect pd = phishdetect . PhishDetect ( host = \"https://your-server.com\" , api_key = \"your-api-key\" ) pd . indicators . disable ( indicators = [ \"3a2868d359962f226187048c8f7cbf42a5df3dddcd33746f6eb874a660a84bb6\" ]) Source code in phishdetect/models/indicators.py def disable ( self , indicators ): \"\"\"Set status of provided indicators to \"disabled\". Args: indicators (list): List of hashed indicators in SHA256 format. Returns: The parsed JSON response from the REST API request. Examples: ```python import phishdetect pd = phishdetect.PhishDetect(host=\"https://your-server.com\", api_key=\"your-api-key\") pd.indicators.disable(indicators=[\"3a2868d359962f226187048c8f7cbf42a5df3dddcd33746f6eb874a660a84bb6\"]) ``` \"\"\" return self . _phishdetect . post ( API_PATH [ \"indicators_disable\" ], json = indicators ) enable ( self , indicators ) Set status of provided indicators to \"enabled\". Parameters: Name Type Description Default indicators list List of hashed indicators in SHA256 format. required Returns: Type Description The parsed JSON response from the REST API request. Examples: import phishdetect pd = phishdetect . PhishDetect ( host = \"https://your-server.com\" , api_key = \"your-api-key\" ) pd . indicators . enable ( indicators = [ \"3a2868d359962f226187048c8f7cbf42a5df3dddcd33746f6eb874a660a84bb6\" ]) Source code in phishdetect/models/indicators.py def enable ( self , indicators ): \"\"\"Set status of provided indicators to \"enabled\". Args: indicators (list): List of hashed indicators in SHA256 format. Returns: The parsed JSON response from the REST API request. Examples: ```python import phishdetect pd = phishdetect.PhishDetect(host=\"https://your-server.com\", api_key=\"your-api-key\") pd.indicators.enable(indicators=[\"3a2868d359962f226187048c8f7cbf42a5df3dddcd33746f6eb874a660a84bb6\"]) ``` \"\"\" return self . _phishdetect . post ( API_PATH [ \"indicators_enable\" ], json = indicators ) fetch ( self ) Fetch the default set of indicators (should be, from last 6 months.) Returns: Type Description The parsed JSON response from the REST API request. Examples: import phishdetect pd = phishdetect . PhishDetect ( host = \"https://your-server.com\" , api_key = \"your-api-key\" ) iocs = pd . indicators . fetch () Source code in phishdetect/models/indicators.py def fetch ( self ): \"\"\"Fetch the default set of indicators (should be, from last 6 months.) Returns: The parsed JSON response from the REST API request. Examples: ```python import phishdetect pd = phishdetect.PhishDetect(host=\"https://your-server.com\", api_key=\"your-api-key\") iocs = pd.indicators.fetch() ``` \"\"\" return self . _phishdetect . get ( API_PATH [ \"indicators_fetch\" ]) fetch_all ( self ) Fetch all the indicators stored in the Node. This API should be avoided unless strictly necessary. Returns: Type Description The parsed JSON response from the REST API request. Examples: import phishdetect pd = phishdetect . PhishDetect ( host = \"https://your-server.com\" , api_key = \"your-api-key\" ) iocs = pd . indicators . fetch_all () Source code in phishdetect/models/indicators.py def fetch_all ( self ): \"\"\"Fetch all the indicators stored in the Node. This API should be avoided unless strictly necessary. Returns: The parsed JSON response from the REST API request. Examples: ```python import phishdetect pd = phishdetect.PhishDetect(host=\"https://your-server.com\", api_key=\"your-api-key\") iocs = pd.indicators.fetch_all() ``` \"\"\" return self . _phishdetect . get ( API_PATH [ \"indicators_fetch_all\" ]) fetch_recent ( self ) Fetch only the indicators from the last 24 hours. Returns: Type Description The parsed JSON response from the REST API request. Examples: import phishdetect pd = phishdetect . PhishDetect ( host = \"https://your-server.com\" , api_key = \"your-api-key\" ) iocs = pd . indicators . fetch_recent () Source code in phishdetect/models/indicators.py def fetch_recent ( self ): \"\"\"Fetch only the indicators from the last 24 hours. Returns: The parsed JSON response from the REST API request. Examples: ```python import phishdetect pd = phishdetect.PhishDetect(host=\"https://your-server.com\", api_key=\"your-api-key\") iocs = pd.indicators.fetch_recent() ``` \"\"\" return self . _phishdetect . get ( API_PATH [ \"indicators_fetch_recent\" ]) get_disabled ( self ) Fetch all the indicators that are marked as disabled. Returns: Type Description The parsed JSON response from the REST API request. Examples: import phishdetect pd = phishdetect . PhishDetect ( host = \"https://your-server.com\" , api_key = \"your-api-key\" ) disabled_iocs = pd . indicators . get_disabled () Source code in phishdetect/models/indicators.py def get_disabled ( self ): \"\"\"Fetch all the indicators that are marked as disabled. Returns: The parsed JSON response from the REST API request. Examples: ```python import phishdetect pd = phishdetect.PhishDetect(host=\"https://your-server.com\", api_key=\"your-api-key\") disabled_iocs = pd.indicators.get_disabled() ``` \"\"\" return self . _phishdetect . get ( API_PATH [ \"indicators_disabled\" ]) get_pending ( self ) Fetch all the indicators that are marked as pending. Returns: Type Description The parsed JSON response from the REST API request. Examples: import phishdetect pd = phishdetect . PhishDetect ( host = \"https://your-server.com\" , api_key = \"your-api-key\" ) pending_iocs = pd . indicators . get_pending () Source code in phishdetect/models/indicators.py def get_pending ( self ): \"\"\"Fetch all the indicators that are marked as pending. Returns: The parsed JSON response from the REST API request. Examples: ```python import phishdetect pd = phishdetect.PhishDetect(host=\"https://your-server.com\", api_key=\"your-api-key\") pending_iocs = pd.indicators.get_pending() ``` \"\"\" return self . _phishdetect . get ( API_PATH [ \"indicators_pending\" ]) Alerts fetch ( self , limit = 0 , offset = 0 ) Fetch all alerts stored by PhishDetect Node. Parameters: Name Type Description Default limit int Set an integer to use as limit of records to retrieve. 0 offset int Set an integer to use as offset of records to retrieve. 0 Returns: Type Description The parsed JSON response from the REST API request. Examples: import phishdetect pd = phishdetect . PhishDetect ( host = \"https://your-server.com\" , api_key = \"your-api-key\" ) for alert in pd . alerts . fetch ( limit = 10 ): print ( alert ) Source code in phishdetect/models/alerts.py def fetch ( self , limit = 0 , offset = 0 ): \"\"\"Fetch all alerts stored by PhishDetect Node. Args: limit (int): Set an integer to use as limit of records to retrieve. offset (int): Set an integer to use as offset of records to retrieve. Returns: The parsed JSON response from the REST API request. Examples: ```python import phishdetect pd = phishdetect.PhishDetect(host=\"https://your-server.com\", api_key=\"your-api-key\") for alert in pd.alerts.fetch(limit=10): print(alert) ``` \"\"\" params = { \"limit\" : limit , \"offset\" : offset , } return self . _phishdetect . get ( API_PATH [ \"alerts_fetch\" ], params = params ) Reports details ( self , uuid ) Get details of a report, including content. Parameters: Name Type Description Default uuid str Identifier of the message to fetch. required Returns: Type Description The parsed JSON response from the REST API request. Examples: import phishdetect pd = phishdetect . PhishDetect ( host = \"https://your-server.com\" , api_key = \"your-api-key\" ) for report in pd . reports . fetch (): details = pd . reports . details ( report [ \"uuid\" ]) Source code in phishdetect/models/reports.py def details ( self , uuid ): \"\"\"Get details of a report, including content. Args: uuid (str): Identifier of the message to fetch. Returns: The parsed JSON response from the REST API request. Examples: ```python import phishdetect pd = phishdetect.PhishDetect(host=\"https://your-server.com\", api_key=\"your-api-key\") for report in pd.reports.fetch(): details = pd.reports.details(report[\"uuid\"]) ``` \"\"\" return self . _phishdetect . get ( API_PATH [ \"reports_details\" ] . format ( uuid = uuid )) fetch ( self , limit = 0 , offset = 0 , report_type = '' ) Fetch all reports stored by PhishDetect Node. Parameters: Name Type Description Default limit int Set an integer to use as limit of records to retrieve. 0 offset int Set an integer to use as offset of records to retrieve. 0 report_type str Type of report (\"email\" or \"url\"). '' Returns: Type Description The parsed JSON response from the REST API request. Examples: import phishdetect pd = phishdetect . PhishDetect ( host = \"https://your-server.com\" , api_key = \"your-api-key\" ) for report in pd . reports . fetch ( limit = 10 ): print ( report ) Source code in phishdetect/models/reports.py def fetch ( self , limit = 0 , offset = 0 , report_type = \"\" ): \"\"\"Fetch all reports stored by PhishDetect Node. Args: limit (int): Set an integer to use as limit of records to retrieve. offset (int): Set an integer to use as offset of records to retrieve. report_type (str): Type of report (\"email\" or \"url\"). Returns: The parsed JSON response from the REST API request. Examples: ```python import phishdetect pd = phishdetect.PhishDetect(host=\"https://your-server.com\", api_key=\"your-api-key\") for report in pd.reports.fetch(limit=10): print(report) ``` \"\"\" params = { \"limit\" : limit , \"offset\" : offset , \"type\" : report_type , } return self . _phishdetect . get ( API_PATH [ \"reports_fetch\" ], params = params ) Analyze domain ( self , domain ) Request the PhishDetect Node to statically analyze a domain name. Parameters: Name Type Description Default domain str Domain to analyze. required Returns: Type Description The parsed JSON response from the REST API request. Examples: import phishdetect pd = phishdetect . PhishDetect ( host = \"https://your-server.com\" , api_key = \"your-api-key\" ) results = pd . analyze . domain ( \"baddomain.com\" ) Source code in phishdetect/models/analyze.py def domain ( self , domain ): \"\"\"Request the PhishDetect Node to statically analyze a domain name. Args: domain (str): Domain to analyze. Returns: The parsed JSON response from the REST API request. Examples: ```python import phishdetect pd = phishdetect.PhishDetect(host=\"https://your-server.com\", api_key=\"your-api-key\") results = pd.analyze.domain(\"baddomain.com\") ``` \"\"\" return self . _phishdetect . post ( API_PATH [ \"analyze_domain\" ], json = { \"url\" : domain }) html ( self , url , html ) Request the PhishDetect Node to statically analyze an HTML page. Parameters: Name Type Description Default url str URL of the HTML page. required html str HTML of the page to analyze. required Returns: Type Description The parsed JSON response from the REST API request. Examples: import phishdetect pd = phishdetect . PhishDetect ( host = \"https://your-server.com\" , api_key = \"your-api-key\" ) results = pd . analyze . html ( url = \"http://www.badwebsite.com\" , html = \"<html><head></head><body>Bad website!</body></html>\" ) Source code in phishdetect/models/analyze.py def html ( self , url , html ): \"\"\"Request the PhishDetect Node to statically analyze an HTML page. Args: url (str): URL of the HTML page. html (str): HTML of the page to analyze. Returns: The parsed JSON response from the REST API request. Examples: ```python import phishdetect pd = phishdetect.PhishDetect(host=\"https://your-server.com\", api_key=\"your-api-key\") results = pd.analyze.html(url=\"http://www.badwebsite.com\", html=\"<html><head></head><body>Bad website!</body></html>\") ``` \"\"\" json = { \"url\" : url , \"html\" : b64encode ( html . encode ()) . decode (), } return self . _phishdetect . post ( API_PATH [ \"analyze_html\" ], json = json ) link ( self , url ) Request the PhishDetect Node to dynamically analyze a URL. This is only available if the node supports dynamic analysis and if PhishDetect's Docker image is properly installed. Parameters: Name Type Description Default url str URL to analyze. required Returns: Type Description The parsed JSON response from the REST API request. Examples: import phishdetect pd = phishdetect . PhishDetect ( host = \"https://your-server.com\" , api_key = \"your-api-key\" ) results = pd . analyze . link ( \"http://www.badwebsite.com\" ) Source code in phishdetect/models/analyze.py def link ( self , url ): \"\"\"Request the PhishDetect Node to dynamically analyze a URL. This is only available if the node supports dynamic analysis and if PhishDetect's Docker image is properly installed. Args: url (str): URL to analyze. Returns: The parsed JSON response from the REST API request. Examples: ```python import phishdetect pd = phishdetect.PhishDetect(host=\"https://your-server.com\", api_key=\"your-api-key\") results = pd.analyze.link(\"http://www.badwebsite.com\") ``` \"\"\" return self . _phishdetect . post ( API_PATH [ \"analyze_link\" ], json = { \"url\" : url }) url ( self , url ) Request the PhishDetect Node to statically analyze a URL. Parameters: Name Type Description Default url str URL to analyze. required Returns: Type Description The parsed JSON response from the REST API request. Examples: import phishdetect pd = phishdetect . PhishDetect ( host = \"https://your-server.com\" , api_key = \"your-api-key\" ) results = pd . analyze . url ( \"http://www.badwebsite.com\" ) Source code in phishdetect/models/analyze.py def url ( self , url ): \"\"\"Request the PhishDetect Node to statically analyze a URL. Args: url (str): URL to analyze. Returns: The parsed JSON response from the REST API request. Examples: ```python import phishdetect pd = phishdetect.PhishDetect(host=\"https://your-server.com\", api_key=\"your-api-key\") results = pd.analyze.url(\"http://www.badwebsite.com\") ``` \"\"\" return self . _phishdetect . post ( API_PATH [ \"analyze_url\" ], json = { \"url\" : url })","title":"Python API"},{"location":"api/python/#python-api","text":"PhishDetect Node's REST API is also easily accessible through an MIT licensed Python 3 library which can be simply installed (and updated) with: pip3 install -U phishdetect Once installed, you can instantiate a connection to your PhishDetect Node like following: import phishdetect # You have to specify the base host of your PhishDetect Node (including the # schema). The API key is optional, although it is required by some admin-level # APIs. pd = phishdetect . PhishDetect ( host = \"https://your-server.com\" , api_key = \"your-api-key\" ) You can now use the pd object to access all PhishDetect Node's API routes. All available models are detailed in the reference below, and are accessible from an instantiated PhishDetect object. If you are looking for some practical examples, you can have a look at the collection of utilities built using this Python API available here .","title":"Python API"},{"location":"api/python/#phishdetect.models.users","text":"","title":"phishdetect.models.users"},{"location":"api/python/#phishdetect.models.users.Users","text":"","title":"Users"},{"location":"api/python/#phishdetect.models.users.Users.activate","text":"Activate pending user. Parameters: Name Type Description Default uuid str UUID of the user to activate. required Returns: Type Description The parsed JSON response from the REST API request. Examples: import phishdetect pd = phishdetect . PhishDetect ( host = \"https://your-server.com\" , api_key = \"your-api-key\" ) for user in pd . users . get_pending (): pd . users . activate ( user [ \"uuid\" ]) Source code in phishdetect/models/users.py def activate ( self , uuid ): \"\"\"Activate pending user. Args: uuid (str): UUID of the user to activate. Returns: The parsed JSON response from the REST API request. Examples: ```python import phishdetect pd = phishdetect.PhishDetect(host=\"https://your-server.com\", api_key=\"your-api-key\") for user in pd.users.get_pending(): pd.users.activate(user[\"uuid\"]) ``` \"\"\" return self . _phishdetect . get ( API_PATH [ \"users_activate\" ] . format ( uuid = uuid ))","title":"activate()"},{"location":"api/python/#phishdetect.models.users.Users.deactivate","text":"Deactivate existing user. Parameters: Name Type Description Default uuid str UUID of the user to deactivate. required Returns: Type Description The parsed JSON response from the REST API request. Examples: import phishdetect pd = phishdetect . PhishDetect ( host = \"https://your-server.com\" , api_key = \"your-api-key\" ) for user in pd . users . get_active (): pd . users . deactivate ( user [ \"uuid\" ]) Source code in phishdetect/models/users.py def deactivate ( self , uuid ): \"\"\"Deactivate existing user. Args: uuid (str): UUID of the user to deactivate. Returns: The parsed JSON response from the REST API request. Examples: ```python import phishdetect pd = phishdetect.PhishDetect(host=\"https://your-server.com\", api_key=\"your-api-key\") for user in pd.users.get_active(): pd.users.deactivate(user[\"uuid\"]) ``` \"\"\" return self . _phishdetect . get ( API_PATH [ \"users_deactivate\" ] . format ( uuid = uuid ))","title":"deactivate()"},{"location":"api/python/#phishdetect.models.users.Users.get_active","text":"Get list of active users. Returns: Type Description The parsed JSON response from the REST API request. Examples: import phishdetect pd = phishdetect . PhishDetect ( host = \"https://your-server.com\" , api_key = \"your-api-key\" ) pd . users . get_active () Source code in phishdetect/models/users.py def get_active ( self ): \"\"\"Get list of active users. Returns: The parsed JSON response from the REST API request. Examples: ```python import phishdetect pd = phishdetect.PhishDetect(host=\"https://your-server.com\", api_key=\"your-api-key\") pd.users.get_active() ``` \"\"\" return self . _phishdetect . get ( API_PATH [ \"users_active\" ])","title":"get_active()"},{"location":"api/python/#phishdetect.models.users.Users.get_pending","text":"Get list of users pending activation. Returns: Type Description The parsed JSON response from the REST API request. Examples: import phishdetect pd = phishdetect . PhishDetect ( host = \"https://your-server.com\" , api_key = \"your-api-key\" ) pd . users . get_pending () Source code in phishdetect/models/users.py def get_pending ( self ): \"\"\"Get list of users pending activation. Returns: The parsed JSON response from the REST API request. Examples: ```python import phishdetect pd = phishdetect.PhishDetect(host=\"https://your-server.com\", api_key=\"your-api-key\") pd.users.get_pending() ``` \"\"\" return self . _phishdetect . get ( API_PATH [ \"users_pending\" ])","title":"get_pending()"},{"location":"api/python/#phishdetect.models.indicators","text":"","title":"phishdetect.models.indicators"},{"location":"api/python/#phishdetect.models.indicators.Indicators","text":"","title":"Indicators"},{"location":"api/python/#phishdetect.models.indicators.Indicators.add","text":"Add new indicators to PhishDetect Node. Parameters: Name Type Description Default indicators list List of indicators, e.g. [\"domain1.com\", \"domain2.com\"]. This list can also contain indicators hashed in SHA256 form, but in that case the indicators_type argument is required in order to specify if they are domains or emails. required tags list List of tags to assign to all these indicators. [] enabled list Boolean flag indicating if the indicators should be marked as enabled. True indicators_type str String value to explicitly specify the type of indicators submitted. This is typically used only if you are submitting indicators that are already in hashed form, for which the Node can not automatically detect a type. None Returns: Type Description The parsed JSON response from the REST API request. Examples: import phishdetect pd = phishdetect . PhishDetect ( host = \"https://your-server.com\" , api_key = \"your-api-key\" ) # Add new indicators. pd . indicators . add ( indicators = [ \"baddomain1.com\" , \"baddomain2.com\" ], tags = [ \"tag1\" , \"tag2\" ]) # Add new indicators in \"pending\" state. pd . indicators . add ( indicators = [ \"baddomain1.com\" , \"baddomain2.com\" ], tags = [ \"tag1\" , \"tag2\" ], enabled = False ) # Add new hashed indicators. pd . indicators . add ( indicators = [ \"3a2868d359962f226187048c8f7cbf42a5df3dddcd33746f6eb874a660a84bb6\" ], indicators_type = \"domain\" ) Source code in phishdetect/models/indicators.py def add ( self , indicators , tags = [], enabled = True , indicators_type = None ): \"\"\"Add new indicators to PhishDetect Node. Args: indicators (list): List of indicators, e.g. [\"domain1.com\", \"domain2.com\"]. This list can also contain indicators hashed in SHA256 form, but in that case the `indicators_type` argument is required in order to specify if they are domains or emails. tags (list)): List of tags to assign to all these indicators. enabled (list): Boolean flag indicating if the indicators should be marked as enabled. indicators_type (str): String value to explicitly specify the type of indicators submitted. This is typically used only if you are submitting indicators that are already in hashed form, for which the Node can not automatically detect a type. Returns: The parsed JSON response from the REST API request. Examples: ```python import phishdetect pd = phishdetect.PhishDetect(host=\"https://your-server.com\", api_key=\"your-api-key\") # Add new indicators. pd.indicators.add(indicators=[\"baddomain1.com\", \"baddomain2.com\"], tags=[\"tag1\", \"tag2\"]) # Add new indicators in \"pending\" state. pd.indicators.add(indicators=[\"baddomain1.com\", \"baddomain2.com\"], tags=[\"tag1\", \"tag2\"], enabled=False) # Add new hashed indicators. pd.indicators.add(indicators=[\"3a2868d359962f226187048c8f7cbf42a5df3dddcd33746f6eb874a660a84bb6\"], indicators_type=\"domain\") ``` \"\"\" json = { \"indicators\" : indicators , \"tags\" : tags , \"enabled\" : enabled , \"type\" : indicators_type , } return self . _phishdetect . post ( API_PATH [ \"indicators_add\" ], json = json )","title":"add()"},{"location":"api/python/#phishdetect.models.indicators.Indicators.details","text":"Retrieve details on a given indicator (by hash). Parameters: Name Type Description Default sha256 str SHA256 hash of the indicator. required Returns: Type Description The parsed JSON response from the REST API request. Examples: import phishdetect pd = phishdetect . PhishDetect ( host = \"https://your-server.com\" , api_key = \"your-api-key\" ) # Get details of a hashed indicator. details = pd . indicators . details ( sha256 = \"3a2868d359962f226187048c8f7cbf42a5df3dddcd33746f6eb874a660a84bb6\" ) Source code in phishdetect/models/indicators.py def details ( self , sha256 ): \"\"\"Retrieve details on a given indicator (by hash). Args: sha256 (str): SHA256 hash of the indicator. Returns: The parsed JSON response from the REST API request. Examples: ```python import phishdetect pd = phishdetect.PhishDetect(host=\"https://your-server.com\", api_key=\"your-api-key\") # Get details of a hashed indicator. details = pd.indicators.details(sha256=\"3a2868d359962f226187048c8f7cbf42a5df3dddcd33746f6eb874a660a84bb6\") ``` \"\"\" return self . _phishdetect . get ( API_PATH [ \"indicators_details\" ] . format ( sha256 = sha256 ))","title":"details()"},{"location":"api/python/#phishdetect.models.indicators.Indicators.disable","text":"Set status of provided indicators to \"disabled\". Parameters: Name Type Description Default indicators list List of hashed indicators in SHA256 format. required Returns: Type Description The parsed JSON response from the REST API request. Examples: import phishdetect pd = phishdetect . PhishDetect ( host = \"https://your-server.com\" , api_key = \"your-api-key\" ) pd . indicators . disable ( indicators = [ \"3a2868d359962f226187048c8f7cbf42a5df3dddcd33746f6eb874a660a84bb6\" ]) Source code in phishdetect/models/indicators.py def disable ( self , indicators ): \"\"\"Set status of provided indicators to \"disabled\". Args: indicators (list): List of hashed indicators in SHA256 format. Returns: The parsed JSON response from the REST API request. Examples: ```python import phishdetect pd = phishdetect.PhishDetect(host=\"https://your-server.com\", api_key=\"your-api-key\") pd.indicators.disable(indicators=[\"3a2868d359962f226187048c8f7cbf42a5df3dddcd33746f6eb874a660a84bb6\"]) ``` \"\"\" return self . _phishdetect . post ( API_PATH [ \"indicators_disable\" ], json = indicators )","title":"disable()"},{"location":"api/python/#phishdetect.models.indicators.Indicators.enable","text":"Set status of provided indicators to \"enabled\". Parameters: Name Type Description Default indicators list List of hashed indicators in SHA256 format. required Returns: Type Description The parsed JSON response from the REST API request. Examples: import phishdetect pd = phishdetect . PhishDetect ( host = \"https://your-server.com\" , api_key = \"your-api-key\" ) pd . indicators . enable ( indicators = [ \"3a2868d359962f226187048c8f7cbf42a5df3dddcd33746f6eb874a660a84bb6\" ]) Source code in phishdetect/models/indicators.py def enable ( self , indicators ): \"\"\"Set status of provided indicators to \"enabled\". Args: indicators (list): List of hashed indicators in SHA256 format. Returns: The parsed JSON response from the REST API request. Examples: ```python import phishdetect pd = phishdetect.PhishDetect(host=\"https://your-server.com\", api_key=\"your-api-key\") pd.indicators.enable(indicators=[\"3a2868d359962f226187048c8f7cbf42a5df3dddcd33746f6eb874a660a84bb6\"]) ``` \"\"\" return self . _phishdetect . post ( API_PATH [ \"indicators_enable\" ], json = indicators )","title":"enable()"},{"location":"api/python/#phishdetect.models.indicators.Indicators.fetch","text":"Fetch the default set of indicators (should be, from last 6 months.) Returns: Type Description The parsed JSON response from the REST API request. Examples: import phishdetect pd = phishdetect . PhishDetect ( host = \"https://your-server.com\" , api_key = \"your-api-key\" ) iocs = pd . indicators . fetch () Source code in phishdetect/models/indicators.py def fetch ( self ): \"\"\"Fetch the default set of indicators (should be, from last 6 months.) Returns: The parsed JSON response from the REST API request. Examples: ```python import phishdetect pd = phishdetect.PhishDetect(host=\"https://your-server.com\", api_key=\"your-api-key\") iocs = pd.indicators.fetch() ``` \"\"\" return self . _phishdetect . get ( API_PATH [ \"indicators_fetch\" ])","title":"fetch()"},{"location":"api/python/#phishdetect.models.indicators.Indicators.fetch_all","text":"Fetch all the indicators stored in the Node. This API should be avoided unless strictly necessary. Returns: Type Description The parsed JSON response from the REST API request. Examples: import phishdetect pd = phishdetect . PhishDetect ( host = \"https://your-server.com\" , api_key = \"your-api-key\" ) iocs = pd . indicators . fetch_all () Source code in phishdetect/models/indicators.py def fetch_all ( self ): \"\"\"Fetch all the indicators stored in the Node. This API should be avoided unless strictly necessary. Returns: The parsed JSON response from the REST API request. Examples: ```python import phishdetect pd = phishdetect.PhishDetect(host=\"https://your-server.com\", api_key=\"your-api-key\") iocs = pd.indicators.fetch_all() ``` \"\"\" return self . _phishdetect . get ( API_PATH [ \"indicators_fetch_all\" ])","title":"fetch_all()"},{"location":"api/python/#phishdetect.models.indicators.Indicators.fetch_recent","text":"Fetch only the indicators from the last 24 hours. Returns: Type Description The parsed JSON response from the REST API request. Examples: import phishdetect pd = phishdetect . PhishDetect ( host = \"https://your-server.com\" , api_key = \"your-api-key\" ) iocs = pd . indicators . fetch_recent () Source code in phishdetect/models/indicators.py def fetch_recent ( self ): \"\"\"Fetch only the indicators from the last 24 hours. Returns: The parsed JSON response from the REST API request. Examples: ```python import phishdetect pd = phishdetect.PhishDetect(host=\"https://your-server.com\", api_key=\"your-api-key\") iocs = pd.indicators.fetch_recent() ``` \"\"\" return self . _phishdetect . get ( API_PATH [ \"indicators_fetch_recent\" ])","title":"fetch_recent()"},{"location":"api/python/#phishdetect.models.indicators.Indicators.get_disabled","text":"Fetch all the indicators that are marked as disabled. Returns: Type Description The parsed JSON response from the REST API request. Examples: import phishdetect pd = phishdetect . PhishDetect ( host = \"https://your-server.com\" , api_key = \"your-api-key\" ) disabled_iocs = pd . indicators . get_disabled () Source code in phishdetect/models/indicators.py def get_disabled ( self ): \"\"\"Fetch all the indicators that are marked as disabled. Returns: The parsed JSON response from the REST API request. Examples: ```python import phishdetect pd = phishdetect.PhishDetect(host=\"https://your-server.com\", api_key=\"your-api-key\") disabled_iocs = pd.indicators.get_disabled() ``` \"\"\" return self . _phishdetect . get ( API_PATH [ \"indicators_disabled\" ])","title":"get_disabled()"},{"location":"api/python/#phishdetect.models.indicators.Indicators.get_pending","text":"Fetch all the indicators that are marked as pending. Returns: Type Description The parsed JSON response from the REST API request. Examples: import phishdetect pd = phishdetect . PhishDetect ( host = \"https://your-server.com\" , api_key = \"your-api-key\" ) pending_iocs = pd . indicators . get_pending () Source code in phishdetect/models/indicators.py def get_pending ( self ): \"\"\"Fetch all the indicators that are marked as pending. Returns: The parsed JSON response from the REST API request. Examples: ```python import phishdetect pd = phishdetect.PhishDetect(host=\"https://your-server.com\", api_key=\"your-api-key\") pending_iocs = pd.indicators.get_pending() ``` \"\"\" return self . _phishdetect . get ( API_PATH [ \"indicators_pending\" ])","title":"get_pending()"},{"location":"api/python/#phishdetect.models.alerts","text":"","title":"phishdetect.models.alerts"},{"location":"api/python/#phishdetect.models.alerts.Alerts","text":"","title":"Alerts"},{"location":"api/python/#phishdetect.models.alerts.Alerts.fetch","text":"Fetch all alerts stored by PhishDetect Node. Parameters: Name Type Description Default limit int Set an integer to use as limit of records to retrieve. 0 offset int Set an integer to use as offset of records to retrieve. 0 Returns: Type Description The parsed JSON response from the REST API request. Examples: import phishdetect pd = phishdetect . PhishDetect ( host = \"https://your-server.com\" , api_key = \"your-api-key\" ) for alert in pd . alerts . fetch ( limit = 10 ): print ( alert ) Source code in phishdetect/models/alerts.py def fetch ( self , limit = 0 , offset = 0 ): \"\"\"Fetch all alerts stored by PhishDetect Node. Args: limit (int): Set an integer to use as limit of records to retrieve. offset (int): Set an integer to use as offset of records to retrieve. Returns: The parsed JSON response from the REST API request. Examples: ```python import phishdetect pd = phishdetect.PhishDetect(host=\"https://your-server.com\", api_key=\"your-api-key\") for alert in pd.alerts.fetch(limit=10): print(alert) ``` \"\"\" params = { \"limit\" : limit , \"offset\" : offset , } return self . _phishdetect . get ( API_PATH [ \"alerts_fetch\" ], params = params )","title":"fetch()"},{"location":"api/python/#phishdetect.models.reports","text":"","title":"phishdetect.models.reports"},{"location":"api/python/#phishdetect.models.reports.Reports","text":"","title":"Reports"},{"location":"api/python/#phishdetect.models.reports.Reports.details","text":"Get details of a report, including content. Parameters: Name Type Description Default uuid str Identifier of the message to fetch. required Returns: Type Description The parsed JSON response from the REST API request. Examples: import phishdetect pd = phishdetect . PhishDetect ( host = \"https://your-server.com\" , api_key = \"your-api-key\" ) for report in pd . reports . fetch (): details = pd . reports . details ( report [ \"uuid\" ]) Source code in phishdetect/models/reports.py def details ( self , uuid ): \"\"\"Get details of a report, including content. Args: uuid (str): Identifier of the message to fetch. Returns: The parsed JSON response from the REST API request. Examples: ```python import phishdetect pd = phishdetect.PhishDetect(host=\"https://your-server.com\", api_key=\"your-api-key\") for report in pd.reports.fetch(): details = pd.reports.details(report[\"uuid\"]) ``` \"\"\" return self . _phishdetect . get ( API_PATH [ \"reports_details\" ] . format ( uuid = uuid ))","title":"details()"},{"location":"api/python/#phishdetect.models.reports.Reports.fetch","text":"Fetch all reports stored by PhishDetect Node. Parameters: Name Type Description Default limit int Set an integer to use as limit of records to retrieve. 0 offset int Set an integer to use as offset of records to retrieve. 0 report_type str Type of report (\"email\" or \"url\"). '' Returns: Type Description The parsed JSON response from the REST API request. Examples: import phishdetect pd = phishdetect . PhishDetect ( host = \"https://your-server.com\" , api_key = \"your-api-key\" ) for report in pd . reports . fetch ( limit = 10 ): print ( report ) Source code in phishdetect/models/reports.py def fetch ( self , limit = 0 , offset = 0 , report_type = \"\" ): \"\"\"Fetch all reports stored by PhishDetect Node. Args: limit (int): Set an integer to use as limit of records to retrieve. offset (int): Set an integer to use as offset of records to retrieve. report_type (str): Type of report (\"email\" or \"url\"). Returns: The parsed JSON response from the REST API request. Examples: ```python import phishdetect pd = phishdetect.PhishDetect(host=\"https://your-server.com\", api_key=\"your-api-key\") for report in pd.reports.fetch(limit=10): print(report) ``` \"\"\" params = { \"limit\" : limit , \"offset\" : offset , \"type\" : report_type , } return self . _phishdetect . get ( API_PATH [ \"reports_fetch\" ], params = params )","title":"fetch()"},{"location":"api/python/#phishdetect.models.analyze","text":"","title":"phishdetect.models.analyze"},{"location":"api/python/#phishdetect.models.analyze.Analyze","text":"","title":"Analyze"},{"location":"api/python/#phishdetect.models.analyze.Analyze.domain","text":"Request the PhishDetect Node to statically analyze a domain name. Parameters: Name Type Description Default domain str Domain to analyze. required Returns: Type Description The parsed JSON response from the REST API request. Examples: import phishdetect pd = phishdetect . PhishDetect ( host = \"https://your-server.com\" , api_key = \"your-api-key\" ) results = pd . analyze . domain ( \"baddomain.com\" ) Source code in phishdetect/models/analyze.py def domain ( self , domain ): \"\"\"Request the PhishDetect Node to statically analyze a domain name. Args: domain (str): Domain to analyze. Returns: The parsed JSON response from the REST API request. Examples: ```python import phishdetect pd = phishdetect.PhishDetect(host=\"https://your-server.com\", api_key=\"your-api-key\") results = pd.analyze.domain(\"baddomain.com\") ``` \"\"\" return self . _phishdetect . post ( API_PATH [ \"analyze_domain\" ], json = { \"url\" : domain })","title":"domain()"},{"location":"api/python/#phishdetect.models.analyze.Analyze.html","text":"Request the PhishDetect Node to statically analyze an HTML page. Parameters: Name Type Description Default url str URL of the HTML page. required html str HTML of the page to analyze. required Returns: Type Description The parsed JSON response from the REST API request. Examples: import phishdetect pd = phishdetect . PhishDetect ( host = \"https://your-server.com\" , api_key = \"your-api-key\" ) results = pd . analyze . html ( url = \"http://www.badwebsite.com\" , html = \"<html><head></head><body>Bad website!</body></html>\" ) Source code in phishdetect/models/analyze.py def html ( self , url , html ): \"\"\"Request the PhishDetect Node to statically analyze an HTML page. Args: url (str): URL of the HTML page. html (str): HTML of the page to analyze. Returns: The parsed JSON response from the REST API request. Examples: ```python import phishdetect pd = phishdetect.PhishDetect(host=\"https://your-server.com\", api_key=\"your-api-key\") results = pd.analyze.html(url=\"http://www.badwebsite.com\", html=\"<html><head></head><body>Bad website!</body></html>\") ``` \"\"\" json = { \"url\" : url , \"html\" : b64encode ( html . encode ()) . decode (), } return self . _phishdetect . post ( API_PATH [ \"analyze_html\" ], json = json )","title":"html()"},{"location":"api/python/#phishdetect.models.analyze.Analyze.link","text":"Request the PhishDetect Node to dynamically analyze a URL. This is only available if the node supports dynamic analysis and if PhishDetect's Docker image is properly installed. Parameters: Name Type Description Default url str URL to analyze. required Returns: Type Description The parsed JSON response from the REST API request. Examples: import phishdetect pd = phishdetect . PhishDetect ( host = \"https://your-server.com\" , api_key = \"your-api-key\" ) results = pd . analyze . link ( \"http://www.badwebsite.com\" ) Source code in phishdetect/models/analyze.py def link ( self , url ): \"\"\"Request the PhishDetect Node to dynamically analyze a URL. This is only available if the node supports dynamic analysis and if PhishDetect's Docker image is properly installed. Args: url (str): URL to analyze. Returns: The parsed JSON response from the REST API request. Examples: ```python import phishdetect pd = phishdetect.PhishDetect(host=\"https://your-server.com\", api_key=\"your-api-key\") results = pd.analyze.link(\"http://www.badwebsite.com\") ``` \"\"\" return self . _phishdetect . post ( API_PATH [ \"analyze_link\" ], json = { \"url\" : url })","title":"link()"},{"location":"api/python/#phishdetect.models.analyze.Analyze.url","text":"Request the PhishDetect Node to statically analyze a URL. Parameters: Name Type Description Default url str URL to analyze. required Returns: Type Description The parsed JSON response from the REST API request. Examples: import phishdetect pd = phishdetect . PhishDetect ( host = \"https://your-server.com\" , api_key = \"your-api-key\" ) results = pd . analyze . url ( \"http://www.badwebsite.com\" ) Source code in phishdetect/models/analyze.py def url ( self , url ): \"\"\"Request the PhishDetect Node to statically analyze a URL. Args: url (str): URL to analyze. Returns: The parsed JSON response from the REST API request. Examples: ```python import phishdetect pd = phishdetect.PhishDetect(host=\"https://your-server.com\", api_key=\"your-api-key\") results = pd.analyze.url(\"http://www.badwebsite.com\") ``` \"\"\" return self . _phishdetect . post ( API_PATH [ \"analyze_url\" ], json = { \"url\" : url })","title":"url()"},{"location":"node/compile/","text":"Compile from sources This page contains instructions on how to compile PhishDetect Node from sources. Pre-compiled binaries for PhishDetect Node are already made available through GitHub Releases . If you wish to use our pre-compiled binaries you can skip this section and move to the installation instructions . Install all the build tools If you decided to build your own binary from the PhishDetect Node source code, you will need to have a working Go 1.14+ environment configured. Please refer to the official documentation on how to install the most recent version of Go on your system of choice. If your system doesn't provide binary packages for recent versions of Go you might have to build Go from sources as well (in that case, you might want to consider using something like GVM ). If so, keep in mind you might need some minimum requirements, such as at least 1GB of memory. It is critically important for the successful compilation of PhishDetect Node that you have $GOPATH properly set, and for the $GOPATH/bin/ folder to be added to your $PATH environment varilable. You should configure this in your .bashrc or .zshrc file like following: export $GOPATH = $HOME /go export PATH = $PATH : $GOPATH /bin Now you should install the required build tools. On Debian/Ubuntu systems you can do so like following: sudo apt install pkg-config git make Install Yara In order to build a PhishDetect Node binary you will also need to install Yara . Although Yara might come packaged in your Linux distribution, it is preferable that you compile it from sources. You should refer to the official documentation for more details, but the installation process should be more or less the following: sudo apt-get update -qq sudo apt-get install automake libtool make gcc pkg-config wget https://github.com/VirusTotal/yara/archive/v4.0.1.tar.gz tar -zxf v4.0.1.tar.gz cd yara-4.0.1 \"./bootstrap.sh\" \"./configure\" make sudo make install sudo ldconfig PhishDetect Node uses Yara to optionally scan suspicious pages with provided Yara rules. Despite this being an optional functionality, compiling PhishDetect Node from sources nevertheless requires libyara being installed on the build system. Ideally you should compile your PhishDetect Node with the same Yara version you will eventually install on the production server the Node will run on. Compile the binary At this point, you should have a working Go build system. You can now clone PhishDetect Node's git repository: git clone https://github.com/phishdetect/phishdetect-node.git Move into the newly created folder: cd phishdetect-node To build the binary you can simply launch the make command. This will attempt to download all required Go dependencies and additional tools, and finally compile PhishDetect Node. If it completed successfully, you should find a compiled binary called phishdetect-node inside the build/ folder. This binary is all you need to run the PhishDetect Node service. You can now move on to the next section for instructions on how to set PhishDetect Node up on your production server.","title":"Compile from sources"},{"location":"node/compile/#compile-from-sources","text":"This page contains instructions on how to compile PhishDetect Node from sources. Pre-compiled binaries for PhishDetect Node are already made available through GitHub Releases . If you wish to use our pre-compiled binaries you can skip this section and move to the installation instructions .","title":"Compile from sources"},{"location":"node/compile/#install-all-the-build-tools","text":"If you decided to build your own binary from the PhishDetect Node source code, you will need to have a working Go 1.14+ environment configured. Please refer to the official documentation on how to install the most recent version of Go on your system of choice. If your system doesn't provide binary packages for recent versions of Go you might have to build Go from sources as well (in that case, you might want to consider using something like GVM ). If so, keep in mind you might need some minimum requirements, such as at least 1GB of memory. It is critically important for the successful compilation of PhishDetect Node that you have $GOPATH properly set, and for the $GOPATH/bin/ folder to be added to your $PATH environment varilable. You should configure this in your .bashrc or .zshrc file like following: export $GOPATH = $HOME /go export PATH = $PATH : $GOPATH /bin Now you should install the required build tools. On Debian/Ubuntu systems you can do so like following: sudo apt install pkg-config git make","title":"Install all the build tools"},{"location":"node/compile/#install-yara","text":"In order to build a PhishDetect Node binary you will also need to install Yara . Although Yara might come packaged in your Linux distribution, it is preferable that you compile it from sources. You should refer to the official documentation for more details, but the installation process should be more or less the following: sudo apt-get update -qq sudo apt-get install automake libtool make gcc pkg-config wget https://github.com/VirusTotal/yara/archive/v4.0.1.tar.gz tar -zxf v4.0.1.tar.gz cd yara-4.0.1 \"./bootstrap.sh\" \"./configure\" make sudo make install sudo ldconfig PhishDetect Node uses Yara to optionally scan suspicious pages with provided Yara rules. Despite this being an optional functionality, compiling PhishDetect Node from sources nevertheless requires libyara being installed on the build system. Ideally you should compile your PhishDetect Node with the same Yara version you will eventually install on the production server the Node will run on.","title":"Install Yara"},{"location":"node/compile/#compile-the-binary","text":"At this point, you should have a working Go build system. You can now clone PhishDetect Node's git repository: git clone https://github.com/phishdetect/phishdetect-node.git Move into the newly created folder: cd phishdetect-node To build the binary you can simply launch the make command. This will attempt to download all required Go dependencies and additional tools, and finally compile PhishDetect Node. If it completed successfully, you should find a compiled binary called phishdetect-node inside the build/ folder. This binary is all you need to run the PhishDetect Node service. You can now move on to the next section for instructions on how to set PhishDetect Node up on your production server.","title":"Compile the binary"},{"location":"node/install/","text":"Install PhishDetect Node Before installing and launching PhishDetect Node you are required to install some dependencies. Install MongoDB First and foremost, you will need to install MongoDB which is used by PhishDetect Node for data storage. All of the configuration, alerts, reports, and indicators will be stored in a phishdetect database on a locally running MongoDB instance. Please refer to the official documentation for instructions on how to install MongoDB on your Linux distribution of choice. Install Yara For the proper functioning of PhishDetect Node, you will also need to install Yara . Although Yara might come packaged in your Linux distribution, it is preferable that you compile it from sources. You should refer to the official documentation for more details, but the installation process should be more or less the following: sudo apt-get update -qq sudo apt-get install automake libtool make gcc pkg-config wget https://github.com/VirusTotal/yara/archive/v4.0.1.tar.gz tar -zxf v4.0.1.tar.gz cd yara-4.0.1 \"./bootstrap.sh\" \"./configure\" make sudo make install sudo ldconfig Install Docker PhishDetect Node is capable of conducting dynamic analysis of suspicious URLs by opening them through a Google Chrome browser running in a disposable Docker container. In order to leverage this functionality, which can be optionally disabled , you necessarily have to install Docker and PhishDetect's docker image. You should refer to Docker's official documentation for instructions on how to install it on your Linux distribution of choice. Security note In order to minimize any potential security risks involved in exposing a Docker service, you should considering installing and launching Docker in rootless mode . Through this configuration Docker is launched with regular user privileges instead of root, mitigating potential vulnerabilities in the daemon and the container runtime. Once you have your Docker daemon installed and running, you can proceed downloading PhishDetect's Docker image (make sure you are running this command from the same user you intend to launch PhishDetect Node's binary from): docker pull phishdetect/phishdetect If everything worked fine, the command docker images should return an output similar to this: REPOSITORY TAG IMAGE ID CREATED SIZE phishdetect/phishdetect latest dcda88861ad6 3 months ago 1.63GB Install PhishDetect Node At this point you will only need to run the phishdetect-node binary. If you decided to compile it by yourself from sources, you should upload the binary from the build system to your server. Otherwise, you can simply download a pre-compiled binary which is made available for every PhishDetect Node release. Here you find the most recent version. Download the distributed binary directly on your server for example with: wget https://github.com/phishdetect/phishdetect-node/releases/download/v2.9.2/phishdetect-node Now make sure to set the binary as executable: chmod +x phishdetect-node In the next section you will find details on how to launch PhishDetect Node and an explanation of all available command-line arguments. Optional: Install a Webserver By default, when executed, PhishDetect Node will run on localhost and port 7856 . In order to enable a secure TLS-encrypted service, and to properly handling connections and optional logging, you should install your preferred webserver and configure it to proxy requests to the local address PhishDetect Node is running on. This documentation provides instructions on how to do so using Nginx .","title":"Install PhishDetect Node"},{"location":"node/install/#install-phishdetect-node","text":"Before installing and launching PhishDetect Node you are required to install some dependencies.","title":"Install PhishDetect Node"},{"location":"node/install/#install-mongodb","text":"First and foremost, you will need to install MongoDB which is used by PhishDetect Node for data storage. All of the configuration, alerts, reports, and indicators will be stored in a phishdetect database on a locally running MongoDB instance. Please refer to the official documentation for instructions on how to install MongoDB on your Linux distribution of choice.","title":"Install MongoDB"},{"location":"node/install/#install-yara","text":"For the proper functioning of PhishDetect Node, you will also need to install Yara . Although Yara might come packaged in your Linux distribution, it is preferable that you compile it from sources. You should refer to the official documentation for more details, but the installation process should be more or less the following: sudo apt-get update -qq sudo apt-get install automake libtool make gcc pkg-config wget https://github.com/VirusTotal/yara/archive/v4.0.1.tar.gz tar -zxf v4.0.1.tar.gz cd yara-4.0.1 \"./bootstrap.sh\" \"./configure\" make sudo make install sudo ldconfig","title":"Install Yara"},{"location":"node/install/#install-docker","text":"PhishDetect Node is capable of conducting dynamic analysis of suspicious URLs by opening them through a Google Chrome browser running in a disposable Docker container. In order to leverage this functionality, which can be optionally disabled , you necessarily have to install Docker and PhishDetect's docker image. You should refer to Docker's official documentation for instructions on how to install it on your Linux distribution of choice. Security note In order to minimize any potential security risks involved in exposing a Docker service, you should considering installing and launching Docker in rootless mode . Through this configuration Docker is launched with regular user privileges instead of root, mitigating potential vulnerabilities in the daemon and the container runtime. Once you have your Docker daemon installed and running, you can proceed downloading PhishDetect's Docker image (make sure you are running this command from the same user you intend to launch PhishDetect Node's binary from): docker pull phishdetect/phishdetect If everything worked fine, the command docker images should return an output similar to this: REPOSITORY TAG IMAGE ID CREATED SIZE phishdetect/phishdetect latest dcda88861ad6 3 months ago 1.63GB","title":"Install Docker"},{"location":"node/install/#install-phishdetect-node_1","text":"At this point you will only need to run the phishdetect-node binary. If you decided to compile it by yourself from sources, you should upload the binary from the build system to your server. Otherwise, you can simply download a pre-compiled binary which is made available for every PhishDetect Node release. Here you find the most recent version. Download the distributed binary directly on your server for example with: wget https://github.com/phishdetect/phishdetect-node/releases/download/v2.9.2/phishdetect-node Now make sure to set the binary as executable: chmod +x phishdetect-node In the next section you will find details on how to launch PhishDetect Node and an explanation of all available command-line arguments.","title":"Install PhishDetect Node"},{"location":"node/install/#optional-install-a-webserver","text":"By default, when executed, PhishDetect Node will run on localhost and port 7856 . In order to enable a secure TLS-encrypted service, and to properly handling connections and optional logging, you should install your preferred webserver and configure it to proxy requests to the local address PhishDetect Node is running on. This documentation provides instructions on how to do so using Nginx .","title":"Optional: Install a Webserver"},{"location":"node/nginx/","text":"Configure Nginx While PhishDetect Node exposes an HTTP service of its own by default on 127.0.0.1:7856 , you should configure your webserver of choice to proxy requests on your production server. This section provides details on how to configure an Nginx webserver, but you can adapt this configuration to any other webserver such as Apache . Obtain a TLS Certificate Before configuring the web server, you need to have a TLS certificate ready for use. In most cases using Let's Encrypt would be sufficient and, after having appropriately configured your DNS records to point to your server, you can use certbot to generate a certificate. If you wish to do so, you can also acquire a TLS certificate from a trusted authority. Nginx Configuration You can now create an Nginx configuration for your virtual host. You are going to configure it to proxy incoming requests to PhishDetect Node HTTP server by adding the line proxy_pass http://127.0.0.1:7856; . If you changed the host or the port number through command-line parameters make sure you change the value of proxy_pass accordingly. You can use the following template and modify accordingly. server { listen 80 ; server_tokens off ; server_name yourdomain.com ; rewrite ^(.*) https://yourdomain.com $request_uri? permanent ; access_log /var/www/yourdomain.com/logs/access.log ; error_log /var/www/yourdomain.com/logs/error.log ; } server { listen 443 ; server_name yourdomain.com ; server_tokens off ; root /var/www/yourdomain.com/public/ ; index index.html index.htm ; location / { proxy_pass http://127.0.0.1:7856 ; proxy_redirect off ; proxy_set_header Host $host ; proxy_set_header X-Real-IP $remote_addr ; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for ; } location ~ /\\. { return 403 ; } client_max_body_size 512M ; add_header Referrer-Policy \"no-referrer\" ; ssl on ; ssl_certificate /etc/letsencrypt/live/yourdomain.com/fullchain.pem ; ssl_certificate_key /etc/letsencrypt/live/yourdomain.com/privkey.pem ; ssl_session_cache shared:SSL:10m ; ssl_session_timeout 10m ; ssl_protocols TLSv1.2 TLSv1.3 ; ssl_ciphers \"EECDH+AESGCM:AES256+EECDH\" ; ssl_prefer_server_ciphers on ; add_header Strict-Transport-Security \"max-age=63072000 ; includeSubdomains ; preload\" ; add_header X-Frame-Options SAMEORIGIN ; add_header X-Content-Type-Options nosniff ; ssl_stapling on ; ssl_stapling_verify on ; resolver_timeout 5s ; access_log /var/www/yourdomain.com/logs/access.log ; error_log /var/www/yourdomain.com/logs/error.log ; }","title":"Configure Nginx"},{"location":"node/nginx/#configure-nginx","text":"While PhishDetect Node exposes an HTTP service of its own by default on 127.0.0.1:7856 , you should configure your webserver of choice to proxy requests on your production server. This section provides details on how to configure an Nginx webserver, but you can adapt this configuration to any other webserver such as Apache .","title":"Configure Nginx"},{"location":"node/nginx/#obtain-a-tls-certificate","text":"Before configuring the web server, you need to have a TLS certificate ready for use. In most cases using Let's Encrypt would be sufficient and, after having appropriately configured your DNS records to point to your server, you can use certbot to generate a certificate. If you wish to do so, you can also acquire a TLS certificate from a trusted authority.","title":"Obtain a TLS Certificate"},{"location":"node/nginx/#nginx-configuration","text":"You can now create an Nginx configuration for your virtual host. You are going to configure it to proxy incoming requests to PhishDetect Node HTTP server by adding the line proxy_pass http://127.0.0.1:7856; . If you changed the host or the port number through command-line parameters make sure you change the value of proxy_pass accordingly. You can use the following template and modify accordingly. server { listen 80 ; server_tokens off ; server_name yourdomain.com ; rewrite ^(.*) https://yourdomain.com $request_uri? permanent ; access_log /var/www/yourdomain.com/logs/access.log ; error_log /var/www/yourdomain.com/logs/error.log ; } server { listen 443 ; server_name yourdomain.com ; server_tokens off ; root /var/www/yourdomain.com/public/ ; index index.html index.htm ; location / { proxy_pass http://127.0.0.1:7856 ; proxy_redirect off ; proxy_set_header Host $host ; proxy_set_header X-Real-IP $remote_addr ; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for ; } location ~ /\\. { return 403 ; } client_max_body_size 512M ; add_header Referrer-Policy \"no-referrer\" ; ssl on ; ssl_certificate /etc/letsencrypt/live/yourdomain.com/fullchain.pem ; ssl_certificate_key /etc/letsencrypt/live/yourdomain.com/privkey.pem ; ssl_session_cache shared:SSL:10m ; ssl_session_timeout 10m ; ssl_protocols TLSv1.2 TLSv1.3 ; ssl_ciphers \"EECDH+AESGCM:AES256+EECDH\" ; ssl_prefer_server_ciphers on ; add_header Strict-Transport-Security \"max-age=63072000 ; includeSubdomains ; preload\" ; add_header X-Frame-Options SAMEORIGIN ; add_header X-Content-Type-Options nosniff ; ssl_stapling on ; ssl_stapling_verify on ; resolver_timeout 5s ; access_log /var/www/yourdomain.com/logs/access.log ; error_log /var/www/yourdomain.com/logs/error.log ; }","title":"Nginx Configuration"},{"location":"node/run/","text":"Configuration and Launch At this point you should have an executable binary for PhishDetect Node installed with all required dependencies. You can now check available command-line parameters using --help : ./phishdetect-node --help Which should result in the following: Usage of phishdetect-node: --api-version string Specify which Docker API version to use (default \"1.37\") --brands string Specify a folder containing YAML files with Brand specifications --contacts string Specify a link to information or contacts details to be provided to your users --create-user Create a new user --debug Enable debug logging --disable-analysis Disable the ability to analyze links and pages --disable-api Disable the API routes --disable-gui Disable the Web GUI --disable-user-auth Disable requirement of a valid user API key for all operations --host string Specify the host to bind the service on (default \"127.0.0.1\") --mongo string Specify the mongodb url (default \"mongodb://localhost:27017\") --port string Specify which port number to bind the service on (default \"7856\") --safebrowsing string Specify a file path containing your Google SafeBrowsing API key (default disabled) --yara string Specify a path to a file or folder contaning Yara rules Create an Administrator As a first step you should create your own Administrator account through the following command: ./phishdetect-node --create-user You will be offered a step-by-step process through which you will be able to select the account's trust level, specify a user name and an email address. At the end, you should be provided with a REST API key. Note down this key, you will need it later. Launch PhishDetect Node Launching PhishDetect Node is as simple as launching this command: ./phishdetect-node You should see something similar to the following: INFO[2020-11-03 13:33:37 +0100] Enable API: true INFO[2020-11-03 13:33:37 +0100] Enable GUI: true INFO[2020-11-03 13:33:37 +0100] Enable Analysis: true INFO[2020-11-03 13:33:37 +0100] Enforce User Auth: true INFO[2020-11-03 13:33:37 +0100] Starting PhishDetect Node on 127.0.0.1:7856 and waiting for requests... Without specifying any additional command-line parameters, PhishDetect Node is launched with the following configuration: Enable REST API routes. Enable GUI pages such as registration form, and link analysis. Enable dynamic analysis through the Dockerized Chrome browsers. Enforce user authentication, and require new users to register and be activated. Launch PhishDetect Node on host 127.0.0.1 and port 7856 . All of these settings can be changed through the appropriate command-line parameters. Command-line Parameters --api-version Use this option to specify which API version for Docker you intend to use. In most cases you should be able to just ignore this option. The default value is 1.37. --brands Use this option to specify a path to a folder containing additional Brand definitions. These are used to extend the default brands embedded in the core library. You can use this to create custom Brand definitions for your own domain names. Custom brand defintions should come in the following YaML format and stored with .yaml or .yml file extensions: name : google original : - google - gmail safelist : - google.com - google.de - google.it - google.fr suspicious : - goooogle - goolge name should contain the name of the brand. original should contain words associated with the particular brand, including for example product names. safelist should contain a list of legitimate domain names associated with the brand. suspicious should contain a list of suspicious permutations of the original brand names which will be used to determine if a suspicious domain or URL is attempting to spoof this particular brand. --contacts Use this option to specify a link to a separate webpage that provides additional information on your PhishDetect Node and perhaps your contact details. --create-user Use this command-line parameter to follow a step-by-step process to create a new user account and obtain its API key. --debug Use this option to enable debug-level logging. Beware that it is very verbose, so you might not want to turn this on in production. --disable-analysis Use this option to disable the ability to perform dynamic analysis of suspicious links and web pages. This is the functionality that will make use of the Docker image. Using this option will turn off this functionality both on the Web GUI and on the REST API. --disable-api Use this option to disable the REST API service. The REST API is used by the clients, such as the browser extension to download lists of malicious indicators as well as to send alerts of suspected events to the PhishDetect Node administrator. --disable-gui Use this option to disable the Web GUI component of the service. The GUI is used by some clients, such as the browser extension, to request the dynamic analysis of suspicious links and pages. --disable-user-auth Use this option to disable the enforcement of user authentication. Users will be able to configure their clients, such as the browser extension, to use your Node without having to register and without having to provide a valid API key. --host Specify the host to bind PhishDetect Node on. The default value is 127.0.0.1 . --mongo Specify a custom connection string to MongoDB. The default value is mongodb://localhost:27017 . --port Use this option to use a custom port number for the web server. The default value is 7856 . --safebrowsing Use this option to provide your private API key for the Google Safebrowsing API. This functionality is currently experimental. --yara Use this option to specify a path to a file or a folder containing Yara rules. Upon launch, PhishDetect Node will find and load all Yara rules contained at this path and subsequently use them for the analysis of suspicious HTML pages and for the dynamic analysis of suspicious links.","title":"Configuration and Launch"},{"location":"node/run/#configuration-and-launch","text":"At this point you should have an executable binary for PhishDetect Node installed with all required dependencies. You can now check available command-line parameters using --help : ./phishdetect-node --help Which should result in the following: Usage of phishdetect-node: --api-version string Specify which Docker API version to use (default \"1.37\") --brands string Specify a folder containing YAML files with Brand specifications --contacts string Specify a link to information or contacts details to be provided to your users --create-user Create a new user --debug Enable debug logging --disable-analysis Disable the ability to analyze links and pages --disable-api Disable the API routes --disable-gui Disable the Web GUI --disable-user-auth Disable requirement of a valid user API key for all operations --host string Specify the host to bind the service on (default \"127.0.0.1\") --mongo string Specify the mongodb url (default \"mongodb://localhost:27017\") --port string Specify which port number to bind the service on (default \"7856\") --safebrowsing string Specify a file path containing your Google SafeBrowsing API key (default disabled) --yara string Specify a path to a file or folder contaning Yara rules","title":"Configuration and Launch"},{"location":"node/run/#create-an-administrator","text":"As a first step you should create your own Administrator account through the following command: ./phishdetect-node --create-user You will be offered a step-by-step process through which you will be able to select the account's trust level, specify a user name and an email address. At the end, you should be provided with a REST API key. Note down this key, you will need it later.","title":"Create an Administrator"},{"location":"node/run/#launch-phishdetect-node","text":"Launching PhishDetect Node is as simple as launching this command: ./phishdetect-node You should see something similar to the following: INFO[2020-11-03 13:33:37 +0100] Enable API: true INFO[2020-11-03 13:33:37 +0100] Enable GUI: true INFO[2020-11-03 13:33:37 +0100] Enable Analysis: true INFO[2020-11-03 13:33:37 +0100] Enforce User Auth: true INFO[2020-11-03 13:33:37 +0100] Starting PhishDetect Node on 127.0.0.1:7856 and waiting for requests... Without specifying any additional command-line parameters, PhishDetect Node is launched with the following configuration: Enable REST API routes. Enable GUI pages such as registration form, and link analysis. Enable dynamic analysis through the Dockerized Chrome browsers. Enforce user authentication, and require new users to register and be activated. Launch PhishDetect Node on host 127.0.0.1 and port 7856 . All of these settings can be changed through the appropriate command-line parameters.","title":"Launch PhishDetect Node"},{"location":"node/run/#command-line-parameters","text":"","title":"Command-line Parameters"},{"location":"node/run/#-api-version","text":"Use this option to specify which API version for Docker you intend to use. In most cases you should be able to just ignore this option. The default value is 1.37.","title":"--api-version"},{"location":"node/run/#-brands","text":"Use this option to specify a path to a folder containing additional Brand definitions. These are used to extend the default brands embedded in the core library. You can use this to create custom Brand definitions for your own domain names. Custom brand defintions should come in the following YaML format and stored with .yaml or .yml file extensions: name : google original : - google - gmail safelist : - google.com - google.de - google.it - google.fr suspicious : - goooogle - goolge name should contain the name of the brand. original should contain words associated with the particular brand, including for example product names. safelist should contain a list of legitimate domain names associated with the brand. suspicious should contain a list of suspicious permutations of the original brand names which will be used to determine if a suspicious domain or URL is attempting to spoof this particular brand.","title":"--brands"},{"location":"node/run/#-contacts","text":"Use this option to specify a link to a separate webpage that provides additional information on your PhishDetect Node and perhaps your contact details.","title":"--contacts"},{"location":"node/run/#-create-user","text":"Use this command-line parameter to follow a step-by-step process to create a new user account and obtain its API key.","title":"--create-user"},{"location":"node/run/#-debug","text":"Use this option to enable debug-level logging. Beware that it is very verbose, so you might not want to turn this on in production.","title":"--debug"},{"location":"node/run/#-disable-analysis","text":"Use this option to disable the ability to perform dynamic analysis of suspicious links and web pages. This is the functionality that will make use of the Docker image. Using this option will turn off this functionality both on the Web GUI and on the REST API.","title":"--disable-analysis"},{"location":"node/run/#-disable-api","text":"Use this option to disable the REST API service. The REST API is used by the clients, such as the browser extension to download lists of malicious indicators as well as to send alerts of suspected events to the PhishDetect Node administrator.","title":"--disable-api"},{"location":"node/run/#-disable-gui","text":"Use this option to disable the Web GUI component of the service. The GUI is used by some clients, such as the browser extension, to request the dynamic analysis of suspicious links and pages.","title":"--disable-gui"},{"location":"node/run/#-disable-user-auth","text":"Use this option to disable the enforcement of user authentication. Users will be able to configure their clients, such as the browser extension, to use your Node without having to register and without having to provide a valid API key.","title":"--disable-user-auth"},{"location":"node/run/#-host","text":"Specify the host to bind PhishDetect Node on. The default value is 127.0.0.1 .","title":"--host"},{"location":"node/run/#-mongo","text":"Specify a custom connection string to MongoDB. The default value is mongodb://localhost:27017 .","title":"--mongo"},{"location":"node/run/#-port","text":"Use this option to use a custom port number for the web server. The default value is 7856 .","title":"--port"},{"location":"node/run/#-safebrowsing","text":"Use this option to provide your private API key for the Google Safebrowsing API. This functionality is currently experimental.","title":"--safebrowsing"},{"location":"node/run/#-yara","text":"Use this option to specify a path to a file or a folder containing Yara rules. Upon launch, PhishDetect Node will find and load all Yara rules contained at this path and subsequently use them for the analysis of suspicious HTML pages and for the dynamic analysis of suspicious links.","title":"--yara"},{"location":"node/why/","text":"Why to run a node? A PhishDetect Node is a server running a PhishDetect service, offering the web interface and the REST API that PhishDetect clients, such as the browser extension and others, can interact with. For example, by default the extension is configured to use a PhishDetect Node located at phishdetect.securitywithoutborders.org that is operated by the cretors of PhishDetect and Security Without Borders . However, we encourage the creation of independent Phishdetect Nodes whenever possible. There are multiple reasons why you would want to setup your own PhishDetect Node. Avoid blocklists While there might be several ways for an attacker to identify a PhishDetect Node connecting to the phishing kits (for example by fingerprinting the instrumented headless Google Chrome browser), the most obvious way is by blocklisting the originating IP address. Because the default Node is publicly accessible and is not meant to be resistant to fingerprinting, it might be the case that careful attackers might notice it and block it. By running your own PhishDetect Node you will be able to diversify and reduce the risk of getting blocklisted. Enforce your own privacy policy While we do the best to protect users' privacy, you might want to run your own PhishDetect Node to reduce exposure of potential personal or private information (see our Privacy Policy for more details on what data could be collected). Maintain visibility on your users If you work for an organization or are part of a group of people who might benefit from using PhishDetect, you might want to run your own Node in order to more directly support your peers and have some visibility over the suspicious links they might receive. Because PhishDetect is free software, you can also modify to better suit yours or your organization's needs and perhaps integrate it in other existing workflows and processes. Distribute your own private indicators A PhishDetect Node can offer a list of hashed known bad indicators, such as bad email addresses and bad domains. These indicators can be used by the clients to monitor and block any known bad content. By running your own PhishDetect Node you will be able to distribute your own private indicators to your users.","title":"Why to run a node?"},{"location":"node/why/#why-to-run-a-node","text":"A PhishDetect Node is a server running a PhishDetect service, offering the web interface and the REST API that PhishDetect clients, such as the browser extension and others, can interact with. For example, by default the extension is configured to use a PhishDetect Node located at phishdetect.securitywithoutborders.org that is operated by the cretors of PhishDetect and Security Without Borders . However, we encourage the creation of independent Phishdetect Nodes whenever possible. There are multiple reasons why you would want to setup your own PhishDetect Node.","title":"Why to run a node?"},{"location":"node/why/#avoid-blocklists","text":"While there might be several ways for an attacker to identify a PhishDetect Node connecting to the phishing kits (for example by fingerprinting the instrumented headless Google Chrome browser), the most obvious way is by blocklisting the originating IP address. Because the default Node is publicly accessible and is not meant to be resistant to fingerprinting, it might be the case that careful attackers might notice it and block it. By running your own PhishDetect Node you will be able to diversify and reduce the risk of getting blocklisted.","title":"Avoid blocklists"},{"location":"node/why/#enforce-your-own-privacy-policy","text":"While we do the best to protect users' privacy, you might want to run your own PhishDetect Node to reduce exposure of potential personal or private information (see our Privacy Policy for more details on what data could be collected).","title":"Enforce your own privacy policy"},{"location":"node/why/#maintain-visibility-on-your-users","text":"If you work for an organization or are part of a group of people who might benefit from using PhishDetect, you might want to run your own Node in order to more directly support your peers and have some visibility over the suspicious links they might receive. Because PhishDetect is free software, you can also modify to better suit yours or your organization's needs and perhaps integrate it in other existing workflows and processes.","title":"Maintain visibility on your users"},{"location":"node/why/#distribute-your-own-private-indicators","text":"A PhishDetect Node can offer a list of hashed known bad indicators, such as bad email addresses and bad domains. These indicators can be used by the clients to monitor and block any known bad content. By running your own PhishDetect Node you will be able to distribute your own private indicators to your users.","title":"Distribute your own private indicators"},{"location":"security/threat_model/","text":"Threat Model This document outlines the threat model for PhishDetect's architecture and its various software component. This document is inspired by SecureDrop's threat model . Because PhishDetect is under active development, this document is always a work in progress. Trust Levels PhishDetect Node currently supports three user trust levels user , submitter and admin , which are respectively assigned the numerical values 0 , 1 and 2 . These values are used to evaluate whether a client has sufficient permissions to access a given API route. For more information about PhishDetect Node's REST API and its routes' permission levels please read here . In this section we explain the general capabilities we expect the three trust levels to access. User Fetch the list of indicators only in hashed form. Automatically submit \" alerts \" of suspicious events. Alerts should only contain metadata (email addresses, URLs) and no content (full-source emails, content at URL). Manually submit \" reports \" of suspicious emails and websites. Reports can contain content, typically only in the case of full-source emails. Submit requests of \" reviews \" of websites which might have been mistakenly blocked. Request the static analysis of a domain or a URL, if the PhishDetect Node enables analysis. Request the static analysis of HTML pages, if the PhishDetect Node enables analysis. Request the dynamic analysis of URLs, if the PhishDetect Node enables analysis. Submitter All of the above. Add new indicators to PhishDetect Node. Administrator All of the above. Enable or disable indicators on PhishDetect Node. Retrieve details of hashed indicators (including the clear-text original). Add, activate, and deactivate users of PhishDetect Node. Inspect \" alerts \" submitted to PhishDetect Node. Inspect \" reports \" submitted to PhishDetect Node. Inspect \" reviews \" requests submitted to PhishDetect Node. Implications What a Compromise of PhishDetect Node Can Surrender If a PhishDetect Node is compromised, the attacker can inspect all registered users, retrieve their registration details including name, email address/contact details and API keys. The attacker could impersonate or deactivate existing users, and add an activate new users. Depending on the configuration of the webserver running PhishDetect Node, if compromised, the attacker could gain additional insights on users and any logged activity, including for example the IP address and the date and time of requests made to the server. If a PhishDetect Node is compromised, the attacker can inspect all indicators stored in clear-text and served to users. If a PhishDetect Node is compromised, the attacker can add new indicators for clients to download, and potentially cause (temporary) disruption against particular services. If a PhishDetect Node is compromised, the attacker can inspect all full-source emails and links reported by users. If a PhishDetect Node is compromised, the attacker can inspect all indicators users requested to be reviewed. If a PhishDetect Node is compromised, the attacker could find ways to deliver malformed data to cause, for example, Cross-Site Scripting or other injection attacks on PhishDetect Browser Extension users. What a Compromise of PhishDetect Browser Extension Can Surrender What a Malicious Website Visited by PhishDetect Browser Extension Can Surrender What a Malicious Website Analyzed by PhishDetect Node Can Surrender What a Compromise of Add-On Store Packages Can Surrender Through the compromise of the account associated with Add-On Stores the attackers can upload malicious updates to PhishDetect Browser Extension which could result in the compromise of PhishDetect users. What the Compromise of the PhishDetect Admin Utility Can Surrender What a Generic Motivated Attacker Can Achieve A Generic Motivated Attacker can attempt to launch a Distributed Denial of Service attack against the PhishDetect Node. If the PhishDetect Node offers analysis, and particularly without authentication of vetted users, a Generic Motivated Attacker can overload the PhishDetect Node by flooding it with requests to dynamically analyze a link. If the PhishDetect Node does not enforce authentication of vetted users, a Generic Motivated Attacker can pollute the database with bogus alerts, reports, and reviews requests. If the PhishDetect Node does not enforce authentication of vetted users, a Generic Motivated Attacker can retrieve the list of hashed indicators and attempt to enumerate which websites or email addresses are blocklisted by the Node operators. If the PhishDetect Node does not enforce authentication of vetted users, a Generic Motivated Attacker can attempt to submit specially crafted \"alerts\", \"reports\" and \"reviews\" to execute NoSQL injections. If the PhishDetect Node does not enforce authentication of vetted users, a Generic Motivated Attacker can attempt to submit specially crafted \"alerts\", \"reports\" and \"reviews\" to execute Cross-Site Scripting on a PhishDetect Admin interface. What a Local Network Attacker Can Achieve Against User, Submitter or Administrator A Local Network Attacker can observe if a User, Submitter or Administrator is accessing a particular PhishDetect Node. A Local Network Attacker can prevent a User, Submitter or Administrator from accessing a PhishDetect Node. What a Nation-wide Network Adversary Can Achieve Against User, Submitter or Administrator A Nation-wide Network Adversary can observe if any User, Submitter or Administrator in a country is accessing a particular PhishDetect Node through DNS or IP protocols inspection. A Nation-wide Network Adversary can block access to a PhishDetect Node to any or all Users, Submitters or Administrators. A Nation-wide Network Adversary capable of forging valid TLS certificates might be able to intercept any transmission from Users, Submitters or Administrators to a PhishDetect Node.","title":"Threat Model"},{"location":"security/threat_model/#threat-model","text":"This document outlines the threat model for PhishDetect's architecture and its various software component. This document is inspired by SecureDrop's threat model . Because PhishDetect is under active development, this document is always a work in progress.","title":"Threat Model"},{"location":"security/threat_model/#trust-levels","text":"PhishDetect Node currently supports three user trust levels user , submitter and admin , which are respectively assigned the numerical values 0 , 1 and 2 . These values are used to evaluate whether a client has sufficient permissions to access a given API route. For more information about PhishDetect Node's REST API and its routes' permission levels please read here . In this section we explain the general capabilities we expect the three trust levels to access.","title":"Trust Levels"},{"location":"security/threat_model/#user","text":"Fetch the list of indicators only in hashed form. Automatically submit \" alerts \" of suspicious events. Alerts should only contain metadata (email addresses, URLs) and no content (full-source emails, content at URL). Manually submit \" reports \" of suspicious emails and websites. Reports can contain content, typically only in the case of full-source emails. Submit requests of \" reviews \" of websites which might have been mistakenly blocked. Request the static analysis of a domain or a URL, if the PhishDetect Node enables analysis. Request the static analysis of HTML pages, if the PhishDetect Node enables analysis. Request the dynamic analysis of URLs, if the PhishDetect Node enables analysis.","title":"User"},{"location":"security/threat_model/#submitter","text":"All of the above. Add new indicators to PhishDetect Node.","title":"Submitter"},{"location":"security/threat_model/#administrator","text":"All of the above. Enable or disable indicators on PhishDetect Node. Retrieve details of hashed indicators (including the clear-text original). Add, activate, and deactivate users of PhishDetect Node. Inspect \" alerts \" submitted to PhishDetect Node. Inspect \" reports \" submitted to PhishDetect Node. Inspect \" reviews \" requests submitted to PhishDetect Node.","title":"Administrator"},{"location":"security/threat_model/#implications","text":"","title":"Implications"},{"location":"security/threat_model/#what-a-compromise-of-phishdetect-node-can-surrender","text":"If a PhishDetect Node is compromised, the attacker can inspect all registered users, retrieve their registration details including name, email address/contact details and API keys. The attacker could impersonate or deactivate existing users, and add an activate new users. Depending on the configuration of the webserver running PhishDetect Node, if compromised, the attacker could gain additional insights on users and any logged activity, including for example the IP address and the date and time of requests made to the server. If a PhishDetect Node is compromised, the attacker can inspect all indicators stored in clear-text and served to users. If a PhishDetect Node is compromised, the attacker can add new indicators for clients to download, and potentially cause (temporary) disruption against particular services. If a PhishDetect Node is compromised, the attacker can inspect all full-source emails and links reported by users. If a PhishDetect Node is compromised, the attacker can inspect all indicators users requested to be reviewed. If a PhishDetect Node is compromised, the attacker could find ways to deliver malformed data to cause, for example, Cross-Site Scripting or other injection attacks on PhishDetect Browser Extension users.","title":"What a Compromise of PhishDetect Node Can Surrender"},{"location":"security/threat_model/#what-a-compromise-of-phishdetect-browser-extension-can-surrender","text":"","title":"What a Compromise of PhishDetect Browser Extension Can Surrender"},{"location":"security/threat_model/#what-a-malicious-website-visited-by-phishdetect-browser-extension-can-surrender","text":"","title":"What a Malicious Website Visited by PhishDetect Browser Extension Can Surrender"},{"location":"security/threat_model/#what-a-malicious-website-analyzed-by-phishdetect-node-can-surrender","text":"","title":"What a Malicious Website Analyzed by PhishDetect Node Can Surrender"},{"location":"security/threat_model/#what-a-compromise-of-add-on-store-packages-can-surrender","text":"Through the compromise of the account associated with Add-On Stores the attackers can upload malicious updates to PhishDetect Browser Extension which could result in the compromise of PhishDetect users.","title":"What a Compromise of Add-On Store Packages Can Surrender"},{"location":"security/threat_model/#what-the-compromise-of-the-phishdetect-admin-utility-can-surrender","text":"","title":"What the Compromise of the PhishDetect Admin Utility Can Surrender"},{"location":"security/threat_model/#what-a-generic-motivated-attacker-can-achieve","text":"A Generic Motivated Attacker can attempt to launch a Distributed Denial of Service attack against the PhishDetect Node. If the PhishDetect Node offers analysis, and particularly without authentication of vetted users, a Generic Motivated Attacker can overload the PhishDetect Node by flooding it with requests to dynamically analyze a link. If the PhishDetect Node does not enforce authentication of vetted users, a Generic Motivated Attacker can pollute the database with bogus alerts, reports, and reviews requests. If the PhishDetect Node does not enforce authentication of vetted users, a Generic Motivated Attacker can retrieve the list of hashed indicators and attempt to enumerate which websites or email addresses are blocklisted by the Node operators. If the PhishDetect Node does not enforce authentication of vetted users, a Generic Motivated Attacker can attempt to submit specially crafted \"alerts\", \"reports\" and \"reviews\" to execute NoSQL injections. If the PhishDetect Node does not enforce authentication of vetted users, a Generic Motivated Attacker can attempt to submit specially crafted \"alerts\", \"reports\" and \"reviews\" to execute Cross-Site Scripting on a PhishDetect Admin interface.","title":"What a Generic Motivated Attacker Can Achieve"},{"location":"security/threat_model/#what-a-local-network-attacker-can-achieve-against-user-submitter-or-administrator","text":"A Local Network Attacker can observe if a User, Submitter or Administrator is accessing a particular PhishDetect Node. A Local Network Attacker can prevent a User, Submitter or Administrator from accessing a PhishDetect Node.","title":"What a Local Network Attacker Can Achieve Against User, Submitter or Administrator"},{"location":"security/threat_model/#what-a-nation-wide-network-adversary-can-achieve-against-user-submitter-or-administrator","text":"A Nation-wide Network Adversary can observe if any User, Submitter or Administrator in a country is accessing a particular PhishDetect Node through DNS or IP protocols inspection. A Nation-wide Network Adversary can block access to a PhishDetect Node to any or all Users, Submitters or Administrators. A Nation-wide Network Adversary capable of forging valid TLS certificates might be able to intercept any transmission from Users, Submitters or Administrators to a PhishDetect Node.","title":"What a Nation-wide Network Adversary Can Achieve Against User, Submitter or Administrator"}]}