{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"node/compile/","text":"Compile from sources This page contains instructions on how to compile PhishDetect Node from sources. Pre-compiled binaries for PhishDetect Node are already made available through GitHub Releases . If you wish to use our pre-compiled binaries you can skip this section and move to the installation instructions . Install all the build tools If you decided to build your own binary from the PhishDetect Node source code, you will need to have a working Go 1.14+ environment configured. Please refer to the official documentation on how to install the most recent version of Go on your system of choice. If your system doesn't provide binary packages for recent versions of Go you might have to build Go from sources as well (in that case, you might want to consider using something like GVM ). If so, keep in mind you might need some minimum requirements, such as at least 1GB of memory. It is critically important for the successful compilation of PhishDetect Node that you have $GOPATH properly set, and for the $GOPATH/bin/ folder to be added to your $PATH environment varilable. You should configure this in your .bashrc or .zshrc file like following: export $GOPATH = $HOME /go export PATH = $PATH : $GOPATH /bin Now you should install the required build tools. On Debian/Ubuntu systems you can do so like following: sudo apt install pkg-config git make Install Yara In order to build a PhishDetect Node binary you will also need to install Yara . Although Yara might come packaged in your Linux distribution, it is preferable that you compile it from sources. You should refer to the official documentation for more details, but the installation process should be more or less the following: sudo apt-get update -qq sudo apt-get install automake libtool make gcc pkg-config wget https://github.com/VirusTotal/yara/archive/v4.0.1.tar.gz tar -zxf v4.0.1.tar.gz cd yara-4.0.1 \"./bootstrap.sh\" \"./configure\" make sudo make install sudo ldconfig PhishDetect Node uses Yara to optionally scan suspicious pages with provided Yara rules. Despite this being an optional functionality, compiling PhishDetect Node from sources nevertheless requires libyara being installed on the build system. Ideally you should compile your PhishDetect Node with the same Yara version you will eventually install on the production server the Node will run on. Compile the binary At this point, you should have a working Go build system. You can now clone PhishDetect Node's git repository: git clone https://github.com/phishdetect/phishdetect-node.git Move into the newly created folder: cd phishdetect-node To build the binary you can simply launch the make command. This will attempt to download all required Go dependencies and additional tools, and finally compile PhishDetect Node. If it completed successfully, you should find a compiled binary called phishdetect-node inside the build/ folder. This binary is all you need to run the PhishDetect Node service. You can now move on to the next section for instructions on how to set PhishDetect Node up on your production server.","title":"Compile from sources"},{"location":"node/compile/#compile-from-sources","text":"This page contains instructions on how to compile PhishDetect Node from sources. Pre-compiled binaries for PhishDetect Node are already made available through GitHub Releases . If you wish to use our pre-compiled binaries you can skip this section and move to the installation instructions .","title":"Compile from sources"},{"location":"node/compile/#install-all-the-build-tools","text":"If you decided to build your own binary from the PhishDetect Node source code, you will need to have a working Go 1.14+ environment configured. Please refer to the official documentation on how to install the most recent version of Go on your system of choice. If your system doesn't provide binary packages for recent versions of Go you might have to build Go from sources as well (in that case, you might want to consider using something like GVM ). If so, keep in mind you might need some minimum requirements, such as at least 1GB of memory. It is critically important for the successful compilation of PhishDetect Node that you have $GOPATH properly set, and for the $GOPATH/bin/ folder to be added to your $PATH environment varilable. You should configure this in your .bashrc or .zshrc file like following: export $GOPATH = $HOME /go export PATH = $PATH : $GOPATH /bin Now you should install the required build tools. On Debian/Ubuntu systems you can do so like following: sudo apt install pkg-config git make","title":"Install all the build tools"},{"location":"node/compile/#install-yara","text":"In order to build a PhishDetect Node binary you will also need to install Yara . Although Yara might come packaged in your Linux distribution, it is preferable that you compile it from sources. You should refer to the official documentation for more details, but the installation process should be more or less the following: sudo apt-get update -qq sudo apt-get install automake libtool make gcc pkg-config wget https://github.com/VirusTotal/yara/archive/v4.0.1.tar.gz tar -zxf v4.0.1.tar.gz cd yara-4.0.1 \"./bootstrap.sh\" \"./configure\" make sudo make install sudo ldconfig PhishDetect Node uses Yara to optionally scan suspicious pages with provided Yara rules. Despite this being an optional functionality, compiling PhishDetect Node from sources nevertheless requires libyara being installed on the build system. Ideally you should compile your PhishDetect Node with the same Yara version you will eventually install on the production server the Node will run on.","title":"Install Yara"},{"location":"node/compile/#compile-the-binary","text":"At this point, you should have a working Go build system. You can now clone PhishDetect Node's git repository: git clone https://github.com/phishdetect/phishdetect-node.git Move into the newly created folder: cd phishdetect-node To build the binary you can simply launch the make command. This will attempt to download all required Go dependencies and additional tools, and finally compile PhishDetect Node. If it completed successfully, you should find a compiled binary called phishdetect-node inside the build/ folder. This binary is all you need to run the PhishDetect Node service. You can now move on to the next section for instructions on how to set PhishDetect Node up on your production server.","title":"Compile the binary"},{"location":"node/install/","text":"Install PhishDetect Node Before installing and launching PhishDetect Node you are required to install some dependencies. Install MongoDB First and foremost, you will need to install MongoDB which is used by PhishDetect Node for data storage. All of the configuration, alerts, reports, and indicators will be stored in a phishdetect database on a locally running MongoDB instance. Please refer to the official documentation for instructions on how to install MongoDB on your Linux distribution of choice. Install Yara For the proper functioning of PhishDetect Node, you will also need to install Yara . Although Yara might come packaged in your Linux distribution, it is preferable that you compile it from sources. You should refer to the official documentation for more details, but the installation process should be more or less the following: sudo apt-get update -qq sudo apt-get install automake libtool make gcc pkg-config wget https://github.com/VirusTotal/yara/archive/v4.0.1.tar.gz tar -zxf v4.0.1.tar.gz cd yara-4.0.1 \"./bootstrap.sh\" \"./configure\" make sudo make install sudo ldconfig Install Docker PhishDetect Node is capable of conducting dynamic analysis of suspicious URLs by opening them through a Google Chrome browser running in a disposable Docker container. In order to leverage this functionality, which can be optionally disabled , you necessarily have to install Docker and PhishDetect's docker image. You should refer to Docker's official documentation for instructions on how to install it on your Linux distribution of choice. However please note : in order to minimize any potential security risks involved in exposing a Docker service, you should considering installing and launching Docker in rootless mode . Through this configuration Docker is launched with regular user privileges instead of root, mitigating potential vulnerabilities in the daemon and the container runtime. Once you have your Docker daemon installed and running, you can proceed downloading PhishDetect's Docker image (make sure you are running this command from the same user you intend to launch PhishDetect Node's binary from): docker pull phishdetect/phishdetect If everything worked fine, the command docker images should return an output similar to this: REPOSITORY TAG IMAGE ID CREATED SIZE phishdetect/phishdetect latest dcda88861ad6 3 months ago 1.63GB Install PhishDetect Node At this point you will only need to run the phishdetect-node binary. If you decided to compile it by yourself from sources, you should upload the binary from the build system to your server. Otherwise, you can simply download a pre-compiled binary which is made available for every PhishDetect Node release. Here you find the most recent version. Download the distributed binary directly on your server for example with: wget https://github.com/phishdetect/phishdetect-node/releases/download/v2.9.2/phishdetect-node Now make sure to set the binary as executable: chmod +x phishdetect-node In the next section you will find details on how to launch PhishDetect Node and an explanation of all available command-line arguments. Optional: Install a Webserver By default, when executed, PhishDetect Node will run on localhost and port 7856 . In order to enable a secure TLS-encrypted service, and to properly handling connections and optional logging, you should install your preferred webserver and configure it to proxy requests to the local address PhishDetect Node is running on. This documentation provides instructions on how to do so using Nginx .","title":"Install PhishDetect Node"},{"location":"node/install/#install-phishdetect-node","text":"Before installing and launching PhishDetect Node you are required to install some dependencies.","title":"Install PhishDetect Node"},{"location":"node/install/#install-mongodb","text":"First and foremost, you will need to install MongoDB which is used by PhishDetect Node for data storage. All of the configuration, alerts, reports, and indicators will be stored in a phishdetect database on a locally running MongoDB instance. Please refer to the official documentation for instructions on how to install MongoDB on your Linux distribution of choice.","title":"Install MongoDB"},{"location":"node/install/#install-yara","text":"For the proper functioning of PhishDetect Node, you will also need to install Yara . Although Yara might come packaged in your Linux distribution, it is preferable that you compile it from sources. You should refer to the official documentation for more details, but the installation process should be more or less the following: sudo apt-get update -qq sudo apt-get install automake libtool make gcc pkg-config wget https://github.com/VirusTotal/yara/archive/v4.0.1.tar.gz tar -zxf v4.0.1.tar.gz cd yara-4.0.1 \"./bootstrap.sh\" \"./configure\" make sudo make install sudo ldconfig","title":"Install Yara"},{"location":"node/install/#install-docker","text":"PhishDetect Node is capable of conducting dynamic analysis of suspicious URLs by opening them through a Google Chrome browser running in a disposable Docker container. In order to leverage this functionality, which can be optionally disabled , you necessarily have to install Docker and PhishDetect's docker image. You should refer to Docker's official documentation for instructions on how to install it on your Linux distribution of choice. However please note : in order to minimize any potential security risks involved in exposing a Docker service, you should considering installing and launching Docker in rootless mode . Through this configuration Docker is launched with regular user privileges instead of root, mitigating potential vulnerabilities in the daemon and the container runtime. Once you have your Docker daemon installed and running, you can proceed downloading PhishDetect's Docker image (make sure you are running this command from the same user you intend to launch PhishDetect Node's binary from): docker pull phishdetect/phishdetect If everything worked fine, the command docker images should return an output similar to this: REPOSITORY TAG IMAGE ID CREATED SIZE phishdetect/phishdetect latest dcda88861ad6 3 months ago 1.63GB","title":"Install Docker"},{"location":"node/install/#install-phishdetect-node_1","text":"At this point you will only need to run the phishdetect-node binary. If you decided to compile it by yourself from sources, you should upload the binary from the build system to your server. Otherwise, you can simply download a pre-compiled binary which is made available for every PhishDetect Node release. Here you find the most recent version. Download the distributed binary directly on your server for example with: wget https://github.com/phishdetect/phishdetect-node/releases/download/v2.9.2/phishdetect-node Now make sure to set the binary as executable: chmod +x phishdetect-node In the next section you will find details on how to launch PhishDetect Node and an explanation of all available command-line arguments.","title":"Install PhishDetect Node"},{"location":"node/install/#optional-install-a-webserver","text":"By default, when executed, PhishDetect Node will run on localhost and port 7856 . In order to enable a secure TLS-encrypted service, and to properly handling connections and optional logging, you should install your preferred webserver and configure it to proxy requests to the local address PhishDetect Node is running on. This documentation provides instructions on how to do so using Nginx .","title":"Optional: Install a Webserver"},{"location":"node/nginx/","text":"Before configuring the web server, you need to have a TLS certificate ready for use. In most cases using Let's Encrypt would be sufficient and, after having appropriately configured your DNS records to point to your server, you can use certbot to generate a certificate. You can now create an Nginx configuration for your virtual host. You can use the following template and modify accordingly (particularly the domain name and the paths): server { listen 80 ; server_tokens off ; server_name yourdomain.com ; rewrite ^(.*) https://yourdomain.com $request_uri? permanent ; access_log /var/www/yourdomain.com/logs/access.log ; error_log /var/www/yourdomain.com/logs/error.log ; } server { listen 443 ; server_name yourdomain.com ; server_tokens off ; root /var/www/yourdomain.com/public/ ; index index.html index.htm ; location / { proxy_pass http://127.0.0.1:7856 ; proxy_redirect off ; proxy_set_header Host $host ; proxy_set_header X-Real-IP $remote_addr ; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for ; } location ~ /\\. { return 403 ; } client_max_body_size 512M ; add_header Referrer-Policy \"no-referrer\" ; ssl on ; ssl_certificate /etc/letsencrypt/live/yourdomain.com/fullchain.pem ; ssl_certificate_key /etc/letsencrypt/live/yourdomain.com/privkey.pem ; ssl_session_cache shared:SSL:10m ; ssl_session_timeout 10m ; ssl_protocols TLSv1 TLSv1.1 TLSv1.2 ; ssl_ciphers \"EECDH+AESGCM:AES256+EECDH\" ; ssl_prefer_server_ciphers on ; add_header Strict-Transport-Security \"max-age=63072000 ; includeSubdomains ; preload\" ; add_header X-Frame-Options SAMEORIGIN ; add_header X-Content-Type-Options nosniff ; ssl_stapling on ; ssl_stapling_verify on ; resolver_timeout 5s ; access_log /var/www/yourdomain.com/logs/access.log ; error_log /var/www/yourdomain.com/logs/error.log ; }","title":"Configure Nginx"},{"location":"node/run/","text":"Configuration and Launch At this point you should have an executable binary for PhishDetect Node installed with all required dependencies. You can now check the help message by launching: phishdetect-node --help This is the output that you should see: Usage of phishdetect-node: --api-version string Specify which Docker API version to use (default \"1.37\") --brands string Specify a folder containing YAML files with Brand specifications --contacts string Specify a link to information or contacts details to be provided to your users --create-user Create a new user --debug Enable debug logging --disable-analysis Disable the ability to analyze links and pages --disable-api Disable the API routes --disable-gui Disable the Web GUI --disable-user-auth Disable requirement of a valid user API key for all operations --host string Specify the host to bind the service on (default \"127.0.0.1\") --mongo string Specify the mongodb url (default \"mongodb://localhost:27017\") --port string Specify which port number to bind the service on (default \"7856\") --safebrowsing string Specify a file path containing your Google SafeBrowsing API key (default disabled) --yara string Specify a path to a file or folder contaning Yara rules Command-line Parameters --api-version Use this option to specify which API version for Docker you intend to use. In most cases you should be able to just ignore this option. The default value is 1.37. --brands Use this option to specify a path to a folder containing additional Brand definitions. These are used to extend the default Brands embedded in the core library. You can use this to create custom Brand definitions for your own domain names. Some additional custom brands are collected here . --contacts Use this option to specify a link to a separate webpage that provides additional information on your PhishDetect Node and perhaps your contact details. --debug Use this option to enable debug-level logging. Beware that it is very verbose, so you might not want to turn this on in production. --disable-analysis Use this option to disable the ability to perform dynamic analysis of suspicious links and web pages. This is the functionality that will make use of the Docker image. Using this option will turn off this functionality both on the Web GUI and on the REST API. --disable-api Use this option to disable the REST API service. The REST API is used by the clients, such as the browser extension to download lists of malicious indicators as well as to send alerts of suspected events to the PhishDetect Node administrator. --disable-web Use this option to disable the Web GUI component of the service. The GUI is used by some clients, such as the browser extension, to request the dynamic analysis of suspicious links and pages. --port Use this option to use a custom port number for the web server. The default value is 7856. --safebrowsing Use this option to provide your private API key for the Google Safebrowsing API. This functionality is currently experimental. How to Launch You should use the combination of options available that best suits your need. In most cases, you will simply have to make sure that MongoDB is installed and running and just launch PhishDetect Node with no arguments. This is what you should see: $ build/linux/phishdetect-node INFO [ 0000 ] Starting PhishDetect Node on 127 .0.0.1:7856 and waiting for requests... As you can see, PhishDetect Node is now running on host 127.0.0.1 and port 7856. In order to make the service accessible to the public, you should configure an appropriate web server (such as Apache or nginx) and generate an SSL/TLS certificate for it.","title":"Configuration and Launch"},{"location":"node/run/#configuration-and-launch","text":"At this point you should have an executable binary for PhishDetect Node installed with all required dependencies. You can now check the help message by launching: phishdetect-node --help This is the output that you should see: Usage of phishdetect-node: --api-version string Specify which Docker API version to use (default \"1.37\") --brands string Specify a folder containing YAML files with Brand specifications --contacts string Specify a link to information or contacts details to be provided to your users --create-user Create a new user --debug Enable debug logging --disable-analysis Disable the ability to analyze links and pages --disable-api Disable the API routes --disable-gui Disable the Web GUI --disable-user-auth Disable requirement of a valid user API key for all operations --host string Specify the host to bind the service on (default \"127.0.0.1\") --mongo string Specify the mongodb url (default \"mongodb://localhost:27017\") --port string Specify which port number to bind the service on (default \"7856\") --safebrowsing string Specify a file path containing your Google SafeBrowsing API key (default disabled) --yara string Specify a path to a file or folder contaning Yara rules","title":"Configuration and Launch"},{"location":"node/run/#command-line-parameters","text":"","title":"Command-line Parameters"},{"location":"node/run/#-api-version","text":"Use this option to specify which API version for Docker you intend to use. In most cases you should be able to just ignore this option. The default value is 1.37.","title":"--api-version"},{"location":"node/run/#-brands","text":"Use this option to specify a path to a folder containing additional Brand definitions. These are used to extend the default Brands embedded in the core library. You can use this to create custom Brand definitions for your own domain names. Some additional custom brands are collected here .","title":"--brands"},{"location":"node/run/#-contacts","text":"Use this option to specify a link to a separate webpage that provides additional information on your PhishDetect Node and perhaps your contact details.","title":"--contacts"},{"location":"node/run/#-debug","text":"Use this option to enable debug-level logging. Beware that it is very verbose, so you might not want to turn this on in production.","title":"--debug"},{"location":"node/run/#-disable-analysis","text":"Use this option to disable the ability to perform dynamic analysis of suspicious links and web pages. This is the functionality that will make use of the Docker image. Using this option will turn off this functionality both on the Web GUI and on the REST API.","title":"--disable-analysis"},{"location":"node/run/#-disable-api","text":"Use this option to disable the REST API service. The REST API is used by the clients, such as the browser extension to download lists of malicious indicators as well as to send alerts of suspected events to the PhishDetect Node administrator.","title":"--disable-api"},{"location":"node/run/#-disable-web","text":"Use this option to disable the Web GUI component of the service. The GUI is used by some clients, such as the browser extension, to request the dynamic analysis of suspicious links and pages.","title":"--disable-web"},{"location":"node/run/#-port","text":"Use this option to use a custom port number for the web server. The default value is 7856.","title":"--port"},{"location":"node/run/#-safebrowsing","text":"Use this option to provide your private API key for the Google Safebrowsing API. This functionality is currently experimental.","title":"--safebrowsing"},{"location":"node/run/#how-to-launch","text":"You should use the combination of options available that best suits your need. In most cases, you will simply have to make sure that MongoDB is installed and running and just launch PhishDetect Node with no arguments. This is what you should see: $ build/linux/phishdetect-node INFO [ 0000 ] Starting PhishDetect Node on 127 .0.0.1:7856 and waiting for requests... As you can see, PhishDetect Node is now running on host 127.0.0.1 and port 7856. In order to make the service accessible to the public, you should configure an appropriate web server (such as Apache or nginx) and generate an SSL/TLS certificate for it.","title":"How to Launch"},{"location":"node/why/","text":"Why to run a node? A PhishDetect Node is a server running a PhishDetect service, offering the web interface and the REST API that PhishDetect clients, such as the browser extension and others, can interact with. For example, by default the extension is configured to use a PhishDetect Node located at phishdetect.securitywithoutborders.org that is operated by the cretors of PhishDetect and Security Without Borders . However, we encourage the creation of independent Phishdetect Nodes whenever possible. There are multiple reasons why you would want to setup your own PhishDetect Node. Avoid blocklists While there might be several ways for an attacker to identify a PhishDetect Node connecting to the phishing kits (for example by fingerprinting the instrumented headless Google Chrome browser), the most obvious way is by blocklisting the originating IP address. Because the default Node is publicly accessible and is not meant to be resistant to fingerprinting, it might be the case that careful attackers might notice it and block it. By running your own PhishDetect Node you will be able to diversify and reduce the risk of getting blocklisted. Enforce your own privacy policy While we do the best to protect users' privacy, you might want to run your own PhishDetect Node to reduce exposure of potential personal or private information (see our Privacy Policy for more details on what data could be collected). Maintain visibility on your users If you work for an organization or are part of a group of people who might benefit from using PhishDetect, you might want to run your own Node in order to more directly support your peers and have some visibility over the suspicious links they might receive. Because PhishDetect is free software, you can also modify to better suit yours or your organization's needs and perhaps integrate it in other existing workflows and processes. Distribute your own private indicators A PhishDetect Node can offer a list of hashed known bad indicators, such as bad email addresses and bad domains. These indicators can be used by the clients to monitor and block any known bad content. By running your own PhishDetect Node you will be able to distribute your own private indicators to your users.","title":"Why to run a node?"},{"location":"node/why/#why-to-run-a-node","text":"A PhishDetect Node is a server running a PhishDetect service, offering the web interface and the REST API that PhishDetect clients, such as the browser extension and others, can interact with. For example, by default the extension is configured to use a PhishDetect Node located at phishdetect.securitywithoutborders.org that is operated by the cretors of PhishDetect and Security Without Borders . However, we encourage the creation of independent Phishdetect Nodes whenever possible. There are multiple reasons why you would want to setup your own PhishDetect Node.","title":"Why to run a node?"},{"location":"node/why/#avoid-blocklists","text":"While there might be several ways for an attacker to identify a PhishDetect Node connecting to the phishing kits (for example by fingerprinting the instrumented headless Google Chrome browser), the most obvious way is by blocklisting the originating IP address. Because the default Node is publicly accessible and is not meant to be resistant to fingerprinting, it might be the case that careful attackers might notice it and block it. By running your own PhishDetect Node you will be able to diversify and reduce the risk of getting blocklisted.","title":"Avoid blocklists"},{"location":"node/why/#enforce-your-own-privacy-policy","text":"While we do the best to protect users' privacy, you might want to run your own PhishDetect Node to reduce exposure of potential personal or private information (see our Privacy Policy for more details on what data could be collected).","title":"Enforce your own privacy policy"},{"location":"node/why/#maintain-visibility-on-your-users","text":"If you work for an organization or are part of a group of people who might benefit from using PhishDetect, you might want to run your own Node in order to more directly support your peers and have some visibility over the suspicious links they might receive. Because PhishDetect is free software, you can also modify to better suit yours or your organization's needs and perhaps integrate it in other existing workflows and processes.","title":"Maintain visibility on your users"},{"location":"node/why/#distribute-your-own-private-indicators","text":"A PhishDetect Node can offer a list of hashed known bad indicators, such as bad email addresses and bad domains. These indicators can be used by the clients to monitor and block any known bad content. By running your own PhishDetect Node you will be able to distribute your own private indicators to your users.","title":"Distribute your own private indicators"}]}